.options tty kalways

.pcheckoff "6004.mit.edu/currentsemester/6004assignment.doit" "Lab #7" -369169646

.verify 0x0 1 0x73ff0003
.verify 0x8 6 0x73ff013f 0x73ff013e 0x7fbf017b 0x739f0176 0x72617453 0x676e6974
.verify 0x20 8 0x73657420 0x2e2e2e74 0xa 0x20000000 0x73ff0143 0xc15f04e0 0x42ff04e1 0xd2370056
.verify 0x40 8 0x77f10026 0x739f016a 0x2842444c 0x2c313372 0x7461645f 0x2c312b61 0x29333272 0x20746120
.verify 0x60 8 0x6562616c 0x4c5f206c 0x20314244 0x6c696166 0x203a6465 0x65707865 0x64657463 0x30783020
.verify 0x80 8 0x30303030 0x2c363530 0x746f6720 0x783020 0x8017f800 0x739f013c 0x739f0155 0x6f4c0a2e
.verify 0xa0 8 0x61206b6f 0x68742074 0x65742065 0x63207473 0x2065646f 0x74206e69 0x75206568 0x206d7361
.verify 0xc0 8 0x656c6966 0x726f6620 0x74656420 0x736c6961 0x2e 0x0 0x73ffffc9 0xc03f0003
.verify 0xe0 8 0x430104e0 0xd2380012 0x77f10015 0x739f0140 0x2842444c 0x5f2c3172 0x61746164 0x3432722c
.verify 0x100 8 0x74612029 0x62616c20 0x5f206c65 0x3242444c 0x69616620 0x3a64656c 0x70786520 0x65746365
.verify 0x120 8 0x78302064 0x30303030 0x32313030 0x6f67202c 0x78302074 0x0 0x8018f800 0x73ffffd5
.verify 0x140 8 0xc2df04ea 0x4336fff8 0xd2390034 0x77f10014 0x739f0127 0x2842444c 0x2c323272 0x722c382d
.verify 0x160 8 0x20293532 0x6c207461 0x6c656261 0x444c5f20 0x66203342 0x656c6961 0x65203a64 0x63657078
.verify 0x180 8 0x20646574 0x30307830 0x30303030 0x202c3433 0x20746f67 0x7830 0x8019f800 0x73ffffbd
.verify 0x1a0 8 0x401f04e8 0x403f04e9 0x405f04ea 0x407f04eb 0x409f04ec 0x40bf04ed 0x40df04ee 0x40ff04ef
.verify 0x1c0 8 0x411f04f0 0x413f04f1 0x415f04f2 0x417f04f3 0x419f04f4 0x41bf04f5 0x41df04f6 0x41ff04f7
.verify 0x1e0 8 0x421f04f8 0x423f04f9 0x425f04fa 0x427f04fb 0x429f04fc 0x42bf04fd 0x42df04fe 0x42ff04ff
.verify 0x200 8 0x431f0500 0x433f0501 0x435f0502 0x437f0503 0x439f0504 0xd0000000 0x70000039 0xd0010001
.verify 0x220 8 0x70000037 0xd0020002 0x70000035 0xd0030003 0x70000033 0xd0040004 0x70000031 0xd0050005
.verify 0x240 8 0x7000002f 0xd0060006 0x7000002d 0xd0070007 0x7000002b 0xd0080008 0x70000029 0xd0090009
.verify 0x260 8 0x70000027 0xd00a000a 0x70000025 0xd00b000b 0x70000023 0xd00c000c 0x70000021 0xd00d000d
.verify 0x280 8 0x7000001f 0xd00e000e 0x7000001d 0xd00f000f 0x7000001b 0xd0100010 0x70000019 0xd0110011
.verify 0x2a0 8 0x70000017 0xd0120012 0x70000015 0xd0130013 0x70000013 0xd0140014 0x70000011 0xd0150015
.verify 0x2c0 8 0x7000000f 0xd0160016 0x7000000d 0xd0170017 0x7000000b 0xd0180018 0x70000009 0xd0190019
.verify 0x2e0 8 0x70000007 0xd01a001a 0x70000005 0xd01b001b 0x70000003 0xd01c001c 0x70000001 0x73ff001c
.verify 0x300 8 0xc740021c 0xf75a0003 0xe35a001f 0x739f00b8 0x2042444c 0x6c696166 0x74206465 0x6f63206f
.verify 0x320 8 0x63657272 0x20796c74 0x73657270 0x65767265 0x65687420 0x6e6f6320 0x746e6574 0x666f2073
.verify 0x340 8 0x67657220 0x65747369 0x522072 0xcf7a000a 0x73fb0002 0xc01b0030 0x2 0xcb7b000a
.verify 0x360 8 0x841ad800 0xc0000030 0x2 0x73ffff4a 0xc01f5a00 0x641f05fc 0xc25ffea5 0x465f05fd
.verify 0x380 8 0x621f05fc 0xe23200ff 0xf2310008 0x91f08800 0x77ef0015 0x739f0096 0x28425453 0x2c383172
.verify 0x3a0 8 0x7365645f 0x2c312b74 0x29313372 0x20746120 0x6562616c 0x535f206c 0x20314254 0x6c696166
.verify 0x3c0 8 0x203a6465 0x65707865 0x64657463 0x30783020 0x41303030 0x2c303035 0x746f6720 0x783020
.verify 0x3e0 8 0x8010f800 0x73ffff2b 0xc01fffff 0x641f05fc 0x4 0x8340f800 0xfada0010 0xfafa0008
.verify 0x400 8 0xfb1a0018 0xc33f0002 0xc29f05fd 0xc27ffff4 0x46d905fc 0x4754ffff 0x46f30609 0x471f05ff
.verify 0x420 8 0x61ff05fc 0x905a7800 0x77e2001d 0x739f0070 0x20656e4f 0x7420666f 0x53206568 0x20734254
.verify 0x440 8 0x72617473 0x676e6974 0x20746120 0x6562616c 0x535f206c 0x20324254 0x6c696166 0x203a6465
.verify 0x460 8 0x65707865 0x64657463 0x65645f20 0x74207473 0x6f63206f 0x6961746e 0x7830206e 0x0
.verify 0x480 8 0x801af800 0x739f0040 0x739f0059 0x6f67202c 0x78302074 0x0 0x800ff800 0x73fffefd
.verify 0x4a0 8 0x739f0053 0x6568430a 0x666f6b63 0x65742066 0x20737473 0x706d6f63 0x6574656c 0x75732064
.verify 0x4c0 8 0x73656363 0x6c756673 0xa21796c 0x0 0x627f04e4 0x667f05fc 0x0 0x73fffec8
.verify 0x4e0 8 0x12345678 0xd752e4d 0x3020100 0x7060504 0xb0a0908 0xf0e0d0c 0x13121110 0x17161514
.verify 0x500 8 0x1b1a1918 0x1f1e1d1c 0x739f0039 0x68550a0a 0x2c686f20 0x656e7520 0x63657078 0x20646574
.verify 0x520 8 0x65746e69 0x70757272 0xa2174 0x0 0x73fffff5 0x7c1f0013 0x9020f000 0x77e1febd
.verify 0x540 8 0x739f002b 0x6e550a0a 0x65707865 0x64657463 0x6c6c6920 0x6c616765 0x736e6920 0x63757274
.verify 0x560 8 0x6e6f6974 0x6f6c202c 0x65746163 0x74612064 0x783020 0xc41e0004 0x739f0003 0x0
.verify 0x580 8 0x73ffffec 0x80000030 0x8020f800 0xc07f0008 0xf401001c 0xe000000f 0xc0000030 0xd8400039
.verify 0x5a0 8 0x77e20001 0xc0000007 0x2 0xf0210004 0xc4630001 0x77e3fff6 0x6ffc0000 0x8020f800
.verify 0x5c0 8 0x60410000 0xc0210004 0xc07f0004 0xe002007f 0x73e00005 0x2 0xf8420008 0xc4630001
.verify 0x5e0 8 0x77e3fffa 0x73fffff6 0x8001f800 0x6ffc0000 0xe41c0000 0x739ffff1 0x6fe00000 0xd752e4d

.macro LDB(RA,CC,RC) betaopc(0x10,RA,CC,RC)
.macro STB(RC,CC,RA) betaopc(0x11,RA,CC,RC)

	 . = 0
.protect
	BR(_Start)	// Reset: starting adr.  No enable/disable.
	BR(UI)		// Unimplemented instruction
	BR(_Interrupt)	// Clock interrupt: periodic
	BR(_Interrupt)	// Character ready to be read from console

////////////////////////////////////////////////////////////////////////
//
//  test code
//
////////////////////////////////////////////////////////////////////////

_Start:	LDR(_Stack, sp)			// Initialize stack pointer.
	CALL(_WrMsg)
	.text "Starting test...\n"

// make sure an unemulated illegal opcode is handled correctly
_illtest:
	betaopc(0x08,0,0,0)	// illegal instruction
	BR(_IllegalInst)	// oops, shouldn't return here!
_illokay:

// try 4 LDB instructions using various addressing
_L1:
	CMOVE(_data,R10)
_LDB1:	LDB(r31,_data+1,r23)	// 0x56
	CMPEQC(r23,0x56,R17)
	BT(R17,_L2)
	CALL(_WrMsg)
	.text "LDB(r31,_data+1,r23) at label _LDB1 failed: expected 0x00000056, got 0x"
	MOVE(r23,r0)
_Fail:
	CALL(_WrHex)
_Fail1:
	CALL(_WrMsg)
	.text ".\nLook at the test code in the uasm file for details."
	HALT()
	BR(0)

_L2:
	CMOVE(3,r1)
_LDB2:	LDB(r1,_data,r24)	// 0x12
	CMPEQC(r24,0x12,R17)
	BT(R17,_L3)
	CALL(_WrMsg)
	.text "LDB(r1,_data,r24) at label _LDB2 failed: expected 0x00000012, got 0x"
	MOVE(R24,r0)
	BR(_Fail)

_L3:
	CMOVE(_data+10,r22)
_LDB3:	LDB(r22,-8,r25)		// 0x34
	CMPEQC(r25,0x34,R17)
	BT(R17,_RegTest)
	CALL(_WrMsg)
	.text "LDB(r22,-8,r25) at label _LDB3 failed: expected 0x00000034, got 0x"
	MOVE(r25,r0)
	BR(_Fail)

// load the registers with their own numbers to check that register
// save/restores are happening correctly
_RegTest:
	LDB(r31,_rdata,r0)		// load each with its number
	LDB(r31,_rdata+1,r1)
	LDB(r31,_rdata+2,r2)
	LDB(r31,_rdata+3,r3)
	LDB(r31,_rdata+4,r4)
	LDB(r31,_rdata+5,r5)
	LDB(r31,_rdata+6,r6)
	LDB(r31,_rdata+7,r7)
	LDB(r31,_rdata+8,r8)
	LDB(r31,_rdata+9,r9)
	LDB(r31,_rdata+10,r10)
	LDB(r31,_rdata+11,r11)
	LDB(r31,_rdata+12,r12)
	LDB(r31,_rdata+13,r13)
	LDB(r31,_rdata+14,r14)
	LDB(r31,_rdata+15,r15)
	LDB(r31,_rdata+16,r16)
	LDB(r31,_rdata+17,r17)
	LDB(r31,_rdata+18,r18)
	LDB(r31,_rdata+19,r19)
    	LDB(r31,_rdata+20,r20)
    	LDB(r31,_rdata+21,r21)
    	LDB(r31,_rdata+22,r22)
    	LDB(r31,_rdata+23,r23)
    	LDB(r31,_rdata+24,r24)
    	LDB(r31,_rdata+25,r25)
    	LDB(r31,_rdata+26,r26)
    	LDB(r31,_rdata+27,r27)
    	LDB(r31,_rdata+28,r28)
_RegVerify:
	CMPEQC(r0,0,r0)			// check each reg value
	BF(r0,_RegFail,r0)
	CMPEQC(r1,1,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r2,2,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r3,3,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r4,4,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r5,5,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r6,6,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r7,7,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r8,8,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r9,9,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r10,10,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r11,11,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r12,12,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r13,13,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r14,14,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r15,15,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r16,16,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r17,17,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r18,18,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r19,19,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r20,20,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r21,21,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r22,22,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r23,23,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r24,24,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r25,25,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r26,26,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r27,27,r0)
	BF(r0,_RegFail,r0)
	CMPEQC(r28,28,r0)
	BF(r0,_RegFail,r0)
	BR(_S1)
_RegFail:
	SUBC(r0,_RegVerify+8,r26)
	SHRC(r26,3,r26)
	ANDC(r26,0x1F,r26)
	CALL(_WrMsg)
	.text "LDB failed to correctly preserve the contents of register R"
	DIVC(r26,10,r27)
	BEQ(r27,.+12)
	ADDC(r27,'0',r0)
	WRCHAR()
	MULC(r27,10,r27)
	SUB(r26,27,r0)
	ADDC(r0,'0',r0)
	WRCHAR()
	BR(_Fail1)

// try a single STB just to scope out basic functionality
_S1:
	CMOVE(0x5A00,r0)
	ST(r0,_dest,r31)	// set up test location
	CMOVE(0xFEA5,r18)
_STB1:	STB(r18,_dest+1,r31)
	LD(R31,_dest,R16)
	ANDC(r18,0xFF,r17)
	SHLC(r17,8,r17)
	CMPEQ(R16,R17,R15)
	BT(R15,_S2)
	CALL(_WrMsg)
	.text "STB(r18,_dest+1,r31) at label _STB1 failed: expected 0x0000A500, got 0x"
	MOVE(r16,r0)
	BR(_Fail)

// try 4 STB instructions with random data and various addresses
_S2:
	CMOVE(0xFFFF,r0)
	ST(r0,_dest,r31)
	TIME()
	MOVE(r0,r26)
	SRAC(r26,16,r22)
	SRAC(r26,8,r23)
	SRAC(r26,24,r24)
	CMOVE(2,r25)
	CMOVE(_dest+1,r20)
	CMOVE(-12,r19)
_STB2:	STB(r22,_dest,r25)
	STB(r26,-1,r20)
	STB(r23,_dest+13,r19)
	STB(r24,_dest+3,r31)
	LD(r31,_dest,r15)
	CMPEQ(r26,r15,r2)
	BT(r2,_LDone)
	CALL(_WrMsg)
	.text "One of the STBs starting at label _STB2 failed: expected _dest to contain 0x"
	MOVE(r26,r0)
	CALL(_WrHex)
	CALL(_WrMsg)
	.text ", got 0x"
	MOVE(r15,r0)
	BR(_Fail)

_LDone:
	CALL(_WrMsg)
	.text "\nCheckoff tests completed successfully!\n"
	LD(r31,_data+4,r19)
	ST(r19,_dest,r31)
	HALT()
	BR(0)

_data:	LONG(0x12345678)
	LONG(225783373)
_rdata:	LONG(0x03020100)
	LONG(0x07060504)
	LONG(0x0B0A0908)
	LONG(0x0F0E0D0C)
	LONG(0x13121110)
	LONG(0x17161514)
	LONG(0x1B1A1918)
	LONG(0x1F1E1D1C)

////////////////////////////////////////////////////////////////////////
//
//  exception handlers
//
////////////////////////////////////////////////////////////////////////

// Handler for miscellaneous -- unexpected -- interrupt:
_Interrupt:
	CALL(_WrMsg)
	.text "\n\nUh oh, unexpected interrupt!\n"
	HALT()		// BAD (Unanticipated) INTERRUPT...
	BR(_Interrupt)

_IllegalInstruction:
	LDR(_IllegalInst1,r0)	// is this the one we expect?
	CMPEQ(r0,xp,r1)
	BT(r1,_illokay)		// yup, continue with tests
_IllegalInst:
	CALL(_WrMsg)
	.text "\n\nUnexpected illegal instruction, located at 0x"
	SUBC(xp,4,r0)
	CALL(_WrHex)
	HALT()
	BR(_IllegalInstruction)
_IllegalInst1:
	LONG(_illtest+4+PC_SUPERVISOR)

////////////////////////////////////////////////////////////////////////
//
//  output procedures
//
////////////////////////////////////////////////////////////////////////

// Output hex integer in R0
// overwrite R1 - R2
_WrHex:
	MOVE(r0,r1)		// we'll need R0 for WRCHAR
	CMOVE(8,r3)
_WrDigit:
	SHRC(r1,28,r0)		// move next digit into R0
	ANDC(r0,0xF,r0)		// mask off unwanted bits
	ADDC(r0,'0',r0)		// convert to digit
	CMPLEC(r0,'9',r2)
	BT(r2,.+8)
	ADDC(r0,'A'-'0'-10,r0)
	WRCHAR()
	SHLC(r1,4,r1)
	SUBC(r3,1,r3)
	BNE(r3,_WrDigit)
	RTN()

// Output zero-terminated string pointed to by R0
// overwrites R1 - R3
_WrMsgAux:
	MOVE(r0,r1)		// we'll need R0 for WRCHAR
_WrWord:
	LD(r1,0,r2)		// Fetch a 4-byte word into R2
	ADDC(R1,4,r1)		// Increment word pointer
	CMOVE(4,r3)		// Byte/word counter
_WrByte:
	ANDC(r2,0x7F,r0)	// Grab next byte -- LOW end first!
	BEQ(r0,_WrEnd)		// Zero byte means end of text.
	WRCHAR()		// Print it.
	SRAC(r2,8,r2)		// Shift out this byte
	SUBC(r3,1,r3)		// Count down... done with this word?
	BNE(r3,_WrByte)		// Nope, continue.
	BR(_WrWord)		// Yup, on to next.
_WrEnd:
	MOVE(r1,r0)		// return pointer to word following string
	RTN()

// Output text string pointed to by LP, execution resumes
// with instruction following text string.
// overwrite R1 - R3
_WrMsg:
	ORC(lp,0,r0)
	CALL(_WrMsgAux)
	JMP(r0)

.unprotect

////////////////////////////////////////////////////////////////////////
//
//  read/write storage
//
////////////////////////////////////////////////////////////////////////

_dest:	LONG(0)
_Stack:	LONG(.+4)
	. = . + 400
