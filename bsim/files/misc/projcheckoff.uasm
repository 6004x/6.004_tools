// Checkoff benchmarks for optional 6.004 Design Project, Fall 2005

.include "/library/beta.uasm"

. = 0

Reset:	BR(Start)

IllOp:	.breakpoint
	BR(IllOp)		// loop on unexpected illegal instruction

Trap:	.breakpoint
	BR(Trap)		// loop on unexpected interrupt


. = 0x20
        LONG(tos)               // Location 0x20 contains pointer to end

Start:
	CMOVE(0, R0)            // 051123 SAW: Avoid Ra bug in LDR

	LDR(tosp,SP)
	BR(bench1,LP)		// unsigned 16-bit divide
	BR(bench2,LP)		// list processing
	BR(bench3,LP)		// JIT emulation
	BR(bench4,LP)		// arithmetic for superscalars...

// NB: Commented out; we're NOT requiring the multiplier this term!
//	BR(bench5,LP)		// Multiplications

	BR(bench6,LP)		// RAM accesses
	ST(LP,sdone,R31)	// Store address of this instruction.

Done:	.breakpoint
	BR(Done)

tosp:	LONG(tos)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
//	Benchmark #1
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// This benchmark makes two calls to an subroutine
// that performs an unsigned divide of its arguments,
// and then checks the returned results.

bench1:
	PUSH(LP)
	CMOVE(32761,R0)
	CMOVE(5,R1)
	BR(UDiv16,LP)
	ST(R1,sbench1,R31)	// quotient: should be 6552 = 0x1998
	ST(R0,sbench1+4,R31)	// remainder: should be 1

	CMOVE(32227,R0)
	CMOVE(37,R1)
	BR(UDiv16,LP)
	ST(R1,sbench1+8,R31)	// quotient: should be 871 = 0x367
	ST(R0,sbench1+12,R31)	// remainder: should be 0

	POP(LP)
	JMP(LP)

// unsigned 16-bit divide: R0 = dividend,  R1 = divisor
// results: R0 = remainder, R1 = quotient

UDiv16:
	CMOVE(16,R2)		// W = 16
	CMOVE(0,R3)		// Q = 0

Uloop:	SHL(R1,R2,R4)		// r4 = divisor << iter
	CMOVE(1,R5)
	SHL(R5,R2,R5)		// r5 = 1 << iter
	CMPLTC(R0,0,R6)
	BT(R6,Uneg)
	SUB(R0,R4,R0)		// R -= divisor << iter
	ADD(R3,R5,R3)		// Q += 1 << iter
	BR(Unext)

Uneg:	ADD(R0,R4,R0)		// R += divisor << iter
	SUB(R3,R5,R3)		// Q -= 1 << iter

Unext:	SUBC(R2,1,R2)		// iter -= 1
	CMPLTC(R2,0,R6)
	BF(R6,Uloop)

	CMPLTC(R0,0,R6)
	BF(R6,Udone)
	ADD(R1,R0,R0)
	SUBC(R3,1,R3)

Udone:	MOVE(R3,R1)		// R0 = remainder, R1 = quotient
	JMP(LP)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
//	Benchmark #2
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// This benchmark makes two subroutine calls: one
// to do an in-place reverse an 11-element list,
// the second to compare the reversed list with a
// "answer" list to see if all went well.

bench2:	PUSH(LP)
	CMOVE(list1,R0)
	PUSH(R0)
	BR(Reverse,LP)
	DEALLOCATE(1)
	PUSH(R0)
	CMOVE(list2,R0)
	PUSH(R0)
	BR(Equal,LP)
	DEALLOCATE(2)
	ST(R0,sbench2,R31)	// should be 1
	POP(LP)
	JMP(LP)

// in-place reverse of list
Reverse:
	PUSH(LP)
	PUSH(BP)
	MOVE(SP,BP)
	PUSH(R1)
	PUSH(R2)
	CMOVE(0,R0)	// last = nil
	LD(BP,-12,R1)
	BEQ(R1,Rdone)
Rloop:
	LD(R1,4,R2)	// next = cdr(this)
	ST(R0,4,R1)
	MOVE(R1,R0)	// last = this
	MOVE(R2,R1)	// this = next
	BNE(R1,Rloop)
Rdone:			// return last
	POP(R2)
	POP(R1)
	POP(BP)
	POP(LP)
	JMP(LP)

// see if two lists are equal
Equal:
	PUSH(LP)
	PUSH(BP)
	MOVE(SP,BP)
	PUSH(R1)
	PUSH(R2)
	PUSH(R3)
	LD(BP,-12,R0)
	LD(BP,-16,R1)
Eloop:
	BNE(R0,E1)	// if (null R0) and (null R1) return t
	BEQ(R1,Etrue)
E1:
	BEQ(R1,Efalse)
	LD(R0,0,R2)
	LD(R1,0,R3)
	CMPEQ(R2,R3,R2)
	BF(R2,Efalse)
	LD(R0,4,R0)
	LD(R1,4,R1)
	BR(Eloop)
Efalse:
	CMOVE(0,R0)
	BR(Edone)
Etrue:
	CMOVE(1,R0)	// return t
Edone:	
	POP(R3)
	POP(R2)
	POP(R1)
	POP(BP)
	POP(LP)
	JMP(LP)

list2:	LONG(1)
	LONG(list2a)
list2i:	LONG(10)
	LONG(list2j)
list2b:	LONG(3)
	LONG(list2c)
list2h:	LONG(9)
	LONG(list2i)
list2d:	LONG(5)
	LONG(list2e)
list2f:	LONG(7)
	LONG(list2g)
list2e:	LONG(6)
	LONG(list2f)
list2c:	LONG(4)
	LONG(list2d)
list2g:	LONG(8)
	LONG(list2h)
list2a:	LONG(2)
	LONG(list2b)
list2j:	LONG(11)
	LONG(0)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
//	Benchmark #3
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// This benchmark makes a copy of itself 0x200
// bytes further up in memory and then jumps
// to the first location of the copy.  The
// process is repeated 2 times.

bench3:	PUSH(LP)
	CMOVE(2,R2)
	CMOVE(sbench3,R7)

b3Start:
	BR(.+4,LP)
	CMOVE(b3End-b3Start,R0)
	MOVE(R7,R6)

b3Loop:	LD(LP,-4,R1)
	ST(R1,0,R7)
	ADDC(LP,4,LP)
	ADDC(R7,4,R7)
	SUBC(R0,4,R0)
	BNE(R0,b3Loop)
	SUBC(R2,1,R2)
	BEQ(R2,b3Done)
	JMP(R6)			// also enters user mode!

b3Done:	POP(LP)
	JMP(LP)
b3End:

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
//	Benchmark #4
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// This benchmark just performs a lot register arithmetic
// and writes the result to memory -- should be a slam
// dunk for pipelined and superscalar machines.

bench4:	CMOVE(0,R0)		// initialize accumulators
	CMOVE(0,R1)
	CMOVE(20,R2)		// loop counter
b4loop:	ADDC(R0,1,R0)
	ADDC(R1,3,R1)
	ADD(R0,R1,R0)
	ADD(R0,R1,R1)
	SUBC(R2,1,R2)
	BNE(R2,b4loop)
	ADD(R1,R0,R0)		// catch annullment problems
	ST(R0,sbench4,R31)	// should be 0x5D7BD920
	JMP(LP)


////////////////////////////////////////////////////////////////////////////////
//
//	Benchmark #5
//
// This was put in just to make the cheap expedient of eliminating the multipler
//   not be sufficient to gain lots of points...
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

bench5:
	CMOVE(-1234, R0)
	MULC(R0, -5432, R0)
	ST(R0, sbench5, R31)
	JMP(LP)


////////////////////////////////////////////////////////////////////////////////
//
//	Benchmark #6
//
// This was put in just to make the cheap expedient of reducing main memory
//   not be sufficient to gain lots of points...
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

bench6:
	CMOVE(4096, R0)         // We'd better have 1024 words of RAM...
	ST(LP, -4, R0)
	LD(R0, -4, R0)
	ST(R0, sbench6, R31)
	JMP(LP)



////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
//	Benchmark r/w storage
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

sbench1:			// benchmark #1 results: 4 words
	LONG(0xEDEDEDED)	// should be overwritten...
	LONG(0xEDEDEDED)	// should be overwritten...
	LONG(0xEDEDEDED)	// should be overwritten...
	LONG(0xEDEDEDED)	// should be overwritten...

sbench2:			// benchmark #2 results: 1 word + list
	LONG(0xEDEDEDED)

list1x:	LONG(1)
	LONG(0)
list1i:	LONG(10)
	LONG(list1h)
list1b:	LONG(3)
	LONG(list1a)
list1h:	LONG(9)
	LONG(list1g)
list1d:	LONG(5)
	LONG(list1c)
list1f:	LONG(7)
	LONG(list1e)
list1e:	LONG(6)
	LONG(list1d)
list1c:	LONG(4)
	LONG(list1b)
list1g:	LONG(8)
	LONG(list1f)
list1a:	LONG(2)
	LONG(list1x)
list1:	LONG(11)
	LONG(list1i)

sbench3:			// benchmark #3 results: 30 words
	. = . + (4*30)

sbench4:			// benchmark #4 results: 1 word
	LONG(0xEDEDEDED)	// should be overwritten...

sbench5:
	LONG(0xDEADBEEF)	// benchmark # 5 results

sbench6:
	LONG(0xBADBABE)

sdone:				// finish marker
	LONG(0xEDEDEDED)	// should be overwritten...

tos:	. = . + 0x100
	. = 0x1000
