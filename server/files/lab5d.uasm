////////////////////////////////////////////////////////////////////////////////
// Sample solution: QSort lab5
////////////////////////////////////////////////////////////////////////////////

.include "lab5checkoff.uasm"

// Leave the following as zero to run ALL the test cases, and get your solution
//   validated if all pass.  If you have trouble with test case N, set it to N
//   to run JUST that test case (for easier debugging):
TestCase:	LONG(0)


// partition(array, left, right)
//
// register allocation:

Rtemp = R1
Rarray = R2
Rpindex = R3
Rpvalue = R4
Rleft = R5
Rright = R6
Rstindex = R7
Ri = R8

//def partition(array,left,right):
//    # choose middle element of array as pivot
//    pivotIndex = (left+right) >> 1;
//    pivotValue = array[pivotIndex]
//
//    # swap array[right] and array[pivotIndex]
//    array[pivotIndex] = array[right]
//    #array[right] = pivotValue
//
//    # elements <= the pivot are moved to the left (smaller indices)
//    storeIndex = left
//    for i in xrange(left,right):  # don't include array[right]
//        temp = array[i]
//        if temp <= pivotValue:
//            array[i] = array[storeIndex]
//            array[storeIndex] = temp
//            storeIndex += 1
//
//    # move pivot to its final place
//    array[right] = array[storeIndex]
//    array[storeIndex] = pivotValue;
//    return storeIndex;

// 3, 2, 1, 7, 6
partition:
	PUSH(LP)
	PUSH(BP)
	MOVE(SP, BP)
	PUSH(R1)
	PUSH(R2)
	PUSH(R3)
	PUSH(R4)
	PUSH(R5)
	PUSH(R6)
	PUSH(R7)
	PUSH(R8)
	PUSH(R9)
	PUSH(R10)

	LD(BP, -12, Rarray)
	LD(BP, -16, Rleft)
	LD(BP, -20, Rright)	

	// choose middle element of array as pivot
	ADD(Rleft, Rright, Rpindex)
	SHRC(Rpindex, 1, Rpindex)	// pivotIndex = (left+right) >> 1
	SHLC(Rpindex, 2, R0)		// pivotIndex*4
	ADD(Rarray, R0, Rtemp)		// adr of array[pivotIndex]
	LD(Rtemp, 0, Rpvalue)		// pivotValue = array[pivotIndex]


	// swap array[right] and array[pivotIndex]
	SHLC(Rright, 2, R0)		// right*4
	ADD(Rarray, R0, R0)		// addr of array[right]
	LD(R0, 0, Rtemp)		// temp = array[right]

	SHLC(Rpindex, 2, R0)		// pivotIndex*4
	ADD(Rarray, R0, R0)		// adr of array[pivotIndex]
	ST(Rtemp, 0, R0)		// array[pivotIndex] = array[right]

	MOVE(Rleft, Rstindex)		// storeIndex = left

	MOVE(Rleft, Ri)			// i = left

partlp:	// Top of loop: do exit test: i up to (excluding) right
	CMPLT(Ri, Rright, R0)		// i < right?
	BF(R0, partlx) 	  		// nope, exit loop.

	SHLC(Ri, 2, R0)			// i*4
	ADD(Rarray, R0, R9)		// R9 = adr of array[i]
	LD(R9, 0, Rtemp)		// temp = array[i]

	CMPLE(Rtemp, Rpvalue, R0)	// is temp <= pivotValue?
	BF(R0, part2)	      		// nope, don't swap.

	SHLC(Rstindex, 2, R0)		// storeIndex*2
	ADD(Rarray, R0, R10)		// R10 = adr of array[storeIndex]		
	LD(R10, 0, R0)			// array[storeIndex]
	ST(R0, 0, R9)			// array[i] = array[storeIndex]
	ST(Rtemp, 0, R10)		// array[storeIndex] = temp
	ADDC(Rstindex, 1, Rstindex)	// storeIndex = storeIndex + 1

part2:
	ADDC(Ri, 1, Ri)
	BR(partlp)

partlx:
	// move pivot to its finall place
	SHLC(Rstindex, 2, R0)		// storeindex*4
	ADD(Rarray, R0, R9)		// R9 = adr of array[storeIndex]

	SHLC(Rright, 2, R0)		// right*4
	ADD(Rarray, R0, R10)		// R10 = adr of array[right]

	LD(R9, 0, R0)			// array[storeIndex]
	ST(R0, 0, R10)			// array[right] = array[storeIndex]
	ST(Rpvalue, 0, R9)		// array[storeIndex] = pivotValue;

	MOVE(Rstindex, R0)		// return storeIndex	
//.breakpoint
	POP(R10)
	POP(R9)
	POP(R8)
	POP(R7)
	POP(R6)
	POP(R5)
	POP(R4)
	POP(R3)
	POP(R2)
	POP(R1)
	MOVE(BP, SP)
	POP(BP)
	POP(LP)
	JMP(LP)


//def quicksort(array, left, right):
//    if left < right:
//        pivotIndex = partition(array,left,right)
//        quicksort(array,left,pivotIndex-1)
//        quicksort(array,pivotIndex+1,right)


// quicksort(ArrayBase, left, right)
quicksort:
	PUSH(LP)
	PUSH(BP)
	MOVE(SP, BP)
	PUSH(R1)
	PUSH(R2)
	PUSH(R3)
	PUSH(R4)

	LD(BP, -12, R1)		// array
	LD(BP, -16, R2)		// left
	LD(BP, -20, R3)		// right

	// Test for negative right -- for part 2F of lab
	CMPLTC(R3, 0, R0)
	BF(R0, .+8)	
//	.breakpoint
	ADD(R31, R31, R31)	

	CMPLT(R2, R3, R0)	// is left < right?
	BF(R0, qx)    		// nope, do nothing else.

	PUSH(R3)
	PUSH(R2)
	PUSH(R1)
	BR(partition, LP)	// partition(array, left, right)
	MOVE(R0, R4)  		// pivotIndex = partition(array, left, right)
	DEALLOCATE(3)

	SUBC(R4, 1, R0)		// pivotIndex-1
	PUSH(R0)
	PUSH(R2)		// left
	PUSH(R1)		// array
	BR(quicksort, LP)	// quicksort(array, left, pivotIndex-1)
	DEALLOCATE(3)

	PUSH(R3)      		// right
	ADDC(R4, 1, R0)		// pivotIndex+1
	PUSH(R0)
	PUSH(R1)		// array
	BR(quicksort, LP)	// quicksort(array, pivotIndex+1, right)
	DEALLOCATE(3)

qx:
	POP(R4)
	POP(R3)
	POP(R2)
	POP(R1)
	MOVE(BP, SP)
	POP(BP)
	POP(LP)
	JMP(LP)

StackBasePtr:
	LONG(StackArea)

.unprotect

StackArea:
	STORAGE(1000)
