// set up power supply node and logic thresholds
.global vdd
VDD vdd gnd 3v
.options vil=0.3 vih=2.7

.subckt NAND2 a b z
P1 z a vdd
P2 z b vdd
N1 z a n1
N2 n1 b gnd
.ends

.subckt NOR2 a b z
P1 z a n1
P2 n1 b vdd
N1 z a gnd
N2 z b gnd
.ends

.subckt XOR2 a b z
X1 NOR2 a b anorb
P1 z anorb n1
P2 n1 a vdd
P3 n1 b vdd
N1 z anorb gnd
N2 z a n2
N3 n2 b gnd
.ends

.subckt FA a b cin s cout
X1 XOR2 a b p
X2 XOR2 p cin s
X3 NAND2 p cin pbar
X4 NAND2 a b gbar
X5 NAND2 pbar gbar cout
.ends

/*
// generate square waves for the input waveforms
Vin1 in1 gnd clock(0,3,20ns)
Vin2 in2 gnd clock(0,3,40ns)

// make an instance of the gate to be test
Xtes XOR2 in1 in2 out

// run through all possible input combinations
.tran 40ns

// plot	the results for	verification
.plot in1 in2 out
*/

// generate square waves for the input waveforms
VB B gnd clock(0,3,20ns)
VA A gnd clock(0,3,40ns)
VCin Cin gnd clock(0,3,80ns)

// make an instance of the gate to be tested --
// assumes FA subckt expects A, B, Cin, S, Cout in that order
Xtest FA A B Cin S Cout

// run through all eight combinations of input values
.tran 80ns

// plot the results for verification.  Compare plots against
// truth table given in the lab writeup.
.plot B A Cin S Cout

