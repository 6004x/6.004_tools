// Sample solution to phase 1 of 6.004 Lab 5              10/4/03 SAW

// Problem: write a routine to compare 2 4-digit test words, and return
//    the count of bulls (exact matches) and cows (misplaced matches).
// Synopsis:
//
//    int val = count_bull_cows(int a, int b);
//
// where a and b each have a decimal digit (0 thru 9, inclusive) in each
//    of their four low 4-bit nybbles.  The returned val contains bulls
//    and cows in its two low-order 4-bit nybbles.  Thus, for example,
//
//     count_bull_cows(0x1234, 0x5678)  => 0x00
//     count_bull_cows(0x1234, 0x1144)  => 0x20
//     count_bull_cows(0x1234, 0x1432)  => 0x22
//     count_bull_cows(0x1234, 0x1234)  => 0x40

// We must include the Beta definitions first:
       .include "/shared/bsim/beta.uasm"

// And then we include the checkoff program:

       .include "/shared/bsim/lab5checkoff.uasm"

// and finally, our hand-code procedure.
// Of course, this sample code was generated using gcc-beta...
// compiled gcc v2.7.2.3
// source file "mootest.c"

	.align 4
count_bull_cows:
	PUSH (LP)
	PUSH (BP)
	MOVE (SP, BP)
	ALLOCATE (9)
	PUSH (R1)
	PUSH (R2)
	ST (R31, 0, BP)
	ST (R31, 4, BP)
	CMOVE (15, R0)
	ST (R0, 32, BP)
	ST (R31, 8, BP)
_LL2:
	LD (BP, 8, R0)
	CMOVE (3, R1)
	CMPLE (R0, R1, R0)
	BT (R0, _LL5)
	BR (_LL3)
_LL5:
	LD (BP, -12, R0)
	LD (BP, 32, R1)
	AND (R0, R1, R0)
	LD (BP, -16, R1)
	LD (BP, 32, R2)
	AND (R1, R2, R1)
	CMPEQ (R0, R1, R0)
	BF (R0, _LL6)
	LD (BP, 0, R1)
	ADDC (R1, 1, R0)
	MOVE (R0, R1)
	ST (R1, 0, BP)
	LD (BP, -12, R0)
	LD (BP, 32, R1)
	OR (R0, R1, R0)
	ST (R0, -12, BP)
	LD (BP, -16, R0)
	LD (BP, 32, R1)
	OR (R0, R1, R0)
	ST (R0, -16, BP)
_LL6:
	LD (BP, 32, R0)
	SHLC (R0, 4, R1)
	ST (R1, 32, BP)
_LL4:
	LD (BP, 8, R1)
	ADDC (R1, 1, R0)
	MOVE (R0, R1)
	ST (R1, 8, BP)
	BR (_LL2)
_LL3:
	LD (BP, -12, R0)
	ST (R0, 16, BP)
	ST (R31, 8, BP)
_LL7:
	LD (BP, 8, R0)
	CMOVE (3, R1)
	CMPLE (R0, R1, R0)
	BT (R0, _LL10)
	BR (_LL8)
_LL10:
	LD (BP, 16, R0)
	ANDC (R0, 15, R1)
	ST (R1, 24, BP)
	LD (BP, 16, R0)
	SRAC (R0, 4, R1)
	ST (R1, 16, BP)
	LD (BP, 24, R0)
	CMOVE (15, R1)
	CMPEQ (R0, R1, R0)
	BF (R0, _LL11)
	BR (_LL9)
_LL11:
	LD (BP, -16, R0)
	ST (R0, 20, BP)
	CMOVE (15, R0)
	ST (R0, 32, BP)
	ST (R31, 12, BP)
_LL12:
	LD (BP, 12, R0)
	CMOVE (3, R1)
	CMPLE (R0, R1, R0)
	BT (R0, _LL15)
	BR (_LL13)
_LL15:
	LD (BP, 20, R0)
	ANDC (R0, 15, R1)
	ST (R1, 28, BP)
	LD (BP, 20, R0)
	SRAC (R0, 4, R1)
	ST (R1, 20, BP)
	LD (BP, 28, R0)
	LD (BP, 24, R1)
	CMPEQ (R0, R1, R0)
	BF (R0, _LL16)
	LD (BP, 4, R1)
	ADDC (R1, 1, R0)
	MOVE (R0, R1)
	ST (R1, 4, BP)
	LD (BP, -16, R0)
	LD (BP, 32, R1)
	OR (R0, R1, R0)
	ST (R0, -16, BP)
	CMOVE (-1, R0)
	ST (R0, 24, BP)
_LL16:
	LD (BP, 32, R0)
	SHLC (R0, 4, R1)
	ST (R1, 32, BP)
_LL14:
	LD (BP, 12, R1)
	ADDC (R1, 1, R0)
	MOVE (R0, R1)
	ST (R1, 12, BP)
	BR (_LL12)
_LL13:
_LL9:
	LD (BP, 8, R1)
	ADDC (R1, 1, R0)
	MOVE (R0, R1)
	ST (R1, 8, BP)
	BR (_LL7)
_LL8:
	LD (BP, 0, R1)
	SHLC (R1, 4, R0)
	LD (BP, 4, R2)
	ADD (R0, R2, R1)
	MOVE (R1, R0)
	BR (_LL1)
_LL1:
	POP (R2)
	POP (R1)
	MOVE (BP, SP)
	POP (BP)
	POP (LP)
	JMP (LP)

StackBase: LONG(.+4)                   // Pointer to bottom of stack
	. = .+0x1000		       // Reserve space for stack...

	. = 0x10000
