
//////

.subckt HAnc a b s c
Xc nand2 a b c
Xs xor2 a b s
.ends

.subckt FA a b cin s cout		//Full Adder using inverse carry half adders
Xha1 HAnc a b s1 c1
Xha2 HAnc s1 cin s c2
Xnc nand2 c1 c2 cout
.ends

//////


.subckt BOOL alufn[3:0] A[31:0] B[31:0] OUT[31:0]
xMuxBool mux4 A[31:0] B[31:0] alufn[0]#32 alufn[1]#32 alufn[2]#32 alufn[3]#32 OUT[31:0]
.ends

.subckt ADDER alufn[0] A[31:0] B[31:0] OUT[31:0] Z V N
xXorMinus xor2 B[31:0] alufn[0]#32 Bc[31:0] //2C negation
xFA FA A[31:0] Bc[31:0] C[30:0] alufn[0] OUT[31:0] C[31:0]

xNbuff buffer OUT[31] N //2C neg bit is highest bit
xVxor xor2 C[31] C[30] V //overflow on last or previous carry for 2C
xnZero or2 OUT[31:0] Zv[30:0] gnd nZ Zv[30:0] //sum all output then invert all below
xZero inverter nZ Z
.ends


.subckt ARITH alufn[1:0] A[31:0] B[31:0] OUT[31:0] Z V N

//xadder ADDER alufn[0] A[31:0] B[31:0] ARTH[31:0] Z V N
xadder ADDER alufn[0] A[31:0] B[31:0] OUT[31:0] Z V N

//xmult  MULT A[31:0] B[31:0] MUL[31:0]

//xMuxOUT mux2 alufn[1]#32 ARTH[31:0] MUL[31:0] OUT[31:0]

.ends

.subckt RSHIFT IN[31:0] BY[4:0] OUT[31:0] SIGN //sign bool
xsh1 mux2  BY[0]#32 IN[31:0]  SIGN    IN[31:1]   sh1[31:0]
xsh2 mux2  BY[1]#32 sh1[31:0] SIGN#2  sh1[31:2]  sh2[31:0]
xsh4 mux2  BY[2]#32 sh2[31:0] SIGN#4  sh2[31:4]  sh4[31:0]
xsh8 mux2  BY[3]#32 sh4[31:0] SIGN#8  sh4[31:8]  sh8[31:0]
xsh16 mux2 BY[4]#32 sh8[31:0] SIGN#16 sh8[31:16] OUT[31:0]
.ends

.subckt SHIFT alufn[1:0] A[31:0] B[4:0] OUT[31:0]
//Left Logical Shift
xsh1L mux2  B[0]#32 A[31:0]    A[30:0]    gnd    sh1L[31:0]
xsh2L mux2  B[1]#32 sh1L[31:0] sh1L[29:0] gnd#2  sh2L[31:0]
xsh4L mux2  B[2]#32 sh2L[31:0] sh2L[27:0] gnd#4  sh4L[31:0]
xsh8L mux2  B[3]#32 sh4L[31:0] sh4L[23:0] gnd#8  sh8L[31:0]
xsh16L mux2 B[4]#32 sh8L[31:0] sh8L[15:0] gnd#16 sh16L[31:0]

/*
//Right Logic Shift
xsh1R mux2  B[0]#32 A[31:0]    gnd    A[31:1]    sh1R[31:0]
xsh2R mux2  B[1]#32 sh1R[31:0] gnd#2  sh1R[31:2] sh2R[31:0]
xsh4R mux2  B[2]#32 sh2R[31:0] gnd#4  sh2R[31:4] sh4R[31:0]
xsh8R mux2  B[3]#32 sh4R[31:0] gnd#8  sh4R[31:8] sh8R[31:0]
xsh16R mux2 B[4]#32 sh8R[31:0] gnd#16 sh8R[31:16] sh16R[31:0]
//Right Arithmatic Shift
xsh1A mux2  B[0]#32 A[31:0]    A[31]    A[31:1]    sh1A[31:0]
xsh2A mux2  B[1]#32 sh1A[31:0] A[31]#2  sh1A[31:2] sh2A[31:0]
xsh4A mux2  B[2]#32 sh2A[31:0] A[31]#4  sh2A[31:4] sh4A[31:0]
xsh8A mux2  B[3]#32 sh4A[31:0] A[31]#8  sh4A[31:8] sh8A[31:0]
xsh16A mux2 B[4]#32 sh8A[31:0] A[31]#16 sh8A[31:16] sh16A[31:0]
*/

//gnd or sign bit mux
xRsign mux2 alufn[1] gnd A[31] Sn
xRLA RSHIFT A[31:0] B[4:0] RLA[31:0] Sn

//right or left mux
xMuxCom mux2 alufn[0]#32 sh16L[31:0] RLA[31:0] OUT[31:0]
.ends

.subckt CMP alufn[3] alufn[1] Z V N OUT[31:0]
xLTh xor2 N V LTh
xLThE or2 LTh Z LThE
xMux mux4 alufn[1] alufn[3] Z LTh LThE gnd OUT[0]
xcons constant0 OUT[31:1] //all other bits 0
.ends

.subckt alu alufn[4:0] a[31:0] b[31:0] out[31:0] z v n

/// Generate outputs from each of BOOL, SHIFT, ARITH, CMP subcircuits:
xbool BOOL alufn[3:0] a[31:0] b[31:0] boolout[31:0]
xshift SHIFT alufn[1:0] a[31:0] b[4:0] shiftout[31:0]
xarith ARITH alufn[1:0] a[31:0] b[31:0] arithout[31:0] z v n
xcmp CMP alufn[3] alufn[1] z v n cmpout[31:0]

// Combine them, using three multiplexors:
xmux1 mux2 alufn[4]#32 nonbool[31:0] boolout[31:0] out[31:0]
xmux2 mux2 alufn[2]#32 arithshift[31:0] cmpout[31:0] nonbool[31:0]
xmux3 mux2 alufn[3]#32 arithout[31:0] shiftout[31:0] arithshift[31:0]
.ends