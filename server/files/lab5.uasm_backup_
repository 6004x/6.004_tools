// cjt Lab 5

// Include the checkoff program:
.include "/shared/bsim/lab5checkoff.uasm"

// Leave the following as zero to run ALL the test cases, and get your solution
//   validated if all pass.  If you have trouble with test case N, set it to N
//   to run JUST that test case (for easier debugging):
TestCase:	LONG(0)

// Quicksort-in-place code.  We include the C/Python version here as a comment;
// you can use this as a model for your Beta assembly version:

//def partition(array,left,right):
//    # choose middle element of array as pivot
//    pivotIndex = (left+right) >> 1;
//    pivotValue = array[pivotIndex]
//
//    # swap array[right] and array[pivotIndex]
//    # note that we already store array[pivotIndex] in pivotValue
//    array[pivotIndex] = array[right]
//
//    # elements <= the pivot are moved to the left (smaller indices)
//    storeIndex = left
//    for i in xrange(left,right):  # don't include array[right]
//        temp = array[i]
//        if temp <= pivotValue:
//            array[i] = array[storeIndex]
//            array[storeIndex] = temp
//            storeIndex += 1
//
//    # move pivot to its final place
//    array[right] = array[storeIndex]
//    array[storeIndex] = pivotValue;
//    return storeIndex;

partition:
	PUSH(LP)
	PUSH(BP)
	MOVE(SP, BP)

	PUSH(R1)     // R1 = array
	LD(BP,-12,R1)
	PUSH(R2)     // R2 = left  (as byte index)
	LD(BP,-16,R2)
	SHLC(R2,2,R2)
	PUSH(R3)     // R3 = right (as byte index)
	LD(BP,-20,R3)
	SHLC(R3,2,R3)

	PUSH(R4)       // R4 = pivotIndex, ie, (left + right) >> 1
	ADD(R2,R3,R4)
	SHRC(R4,1,R4)
	ADD(R1,R4,R4)  // R4 = &array[pivotIndex]
	PUSH(R7)       // R7 = *R4, ie, pivotValue
	LD(R4,0,R7)
	
	ADD(R1,R2,R2)  // R2 = &array[left]
	ADD(R1,R3,R3)  // R3 = &array[right]
	
	// array[pivotIndex] = array[right]
	PUSH(R5)       // R5 = temp
	LD(R3,0,R5)
	ST(R5,0,R4)
	
	PUSH(R6)	   // R6 =  &array[left], ie, array[storeIndex]
	MOVE(R2,R6)
	
	// while (R2 < R3)
	//   R5 = *R2++
	//   if R5 < R4
	//     *(R2-1) = *R6
	//     *R6++ = R5
	//   R2++
loop:
	CMPLT(R2,R3,R0)  // should be unsigned compare!
	BF(R0,ldone)
 	  LD(R2,0,R5)
	  ADDC(R2,4,R2)
	  CMPLE(R5,R7,R0)
	  BF(R0,loop)
	    LD(R6,0,R0)
		ST(R0,-4,R2)
		ST(R5,0,R6)
		ADDC(R6,4,R6)
		BR(loop)
	
ldone:
	LD(R6,0,R0)   // array[right] = array[storeIndex]
	ST(R0,0,R3)
	ST(R7,0,R6)   // array[storeIndex] = pivotValue
	SUB(R6,R1,R0) // return storeIndex
	SHRC(R0,2,R0)

	POP(R6)
	POP(R5)
	POP(R7)
	POP(R4)
	POP(R3)
	POP(R2)
	POP(R1)

	MOVE(BP, SP)
	POP(BP)
	POP(LP)
	JMP(LP)


//def quicksort(array, left, right):
//    if left < right:
//        pivotIndex = partition(array,left,right)
//        quicksort(array,left,pivotIndex-1)
//        quicksort(array,pivotIndex+1,right)

// quicksort(array, left, right)
quicksort:
	PUSH(LP)
	PUSH(BP)
	MOVE(SP, BP)
.breakpoint
	PUSH(R1)
	PUSH(R2)
	PUSH(R3)
	
	LD(BP,-16,R1)  // R1 = left
	LD(BP,-20,R2)  // R2 = right

	CMPLT(R1,R2,R0)
	BF(R0,qdone)   // if left >= right, nothing to do
	
    // pivotIndex = partition(array,left,right)
	PUSH(R2)       // push right
	PUSH(R1)       // push left
	LD(BP,-12,R0)  // push array
	PUSH(R0)
	BR(partition,LP)
	DEALLOCATE(3)
	MOVE(R0,R3)    // R3 = pivotIndex

    // quicksort(array,left,pivotIndex - 1)
    SUBC(R3,1,R0)  // push pivotIndex - 1	
	PUSH(R0)
	PUSH(R1)       // push left
	LD(BP,-12,R0)  // push array
	PUSH(R0)
	BR(quicksort,LP)
	DEALLOCATE(3)

    // quicksort(array,pivotIndex + 1,right)
	PUSH(R2)       // push right
    ADDC(R3,1,R0)  // push pivotIndex + 1	
	PUSH(R0)
	LD(BP,-12,R0)  // push array
	PUSH(R0)
	BR(quicksort,LP)
	DEALLOCATE(3)

qdone:
	POP(R3)
	POP(R2)
	POP(R1)
	
	MOVE(BP, SP)
	POP(BP)
	POP(LP)
	JMP(LP)

// Allocate a stack: SP is initialized by checkoff code.
StackBasePtr:
	LONG(StackArea)

.unprotect

StackArea:
	STORAGE(1000)
