// Design Project #3 w/ 2-stage pipeline, 2-cycle LD/LDR/ST

// Benmark = 53.11 on Fall 2014 checkoff

.global vdd
VDD vdd gnd 1v
.options vil=0.2 vih=0.8

.include "/shared/jsim/stdcell.jsim"
.include "/shared/jsim/projcheckoff.jsim"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///
///	barrel shifter
///
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// SHL: op[1:0] = 0b00
// SHR: op[1:0] = 0b01
// SRA: op[1:0] = 0b11
.subckt shifter a[31:0] b[4:0] shift[31:0] op[1:0]
Xsin nand2 a[31] op[1] sin_
Xinv inverter_2 sin_ sin
Xmux0 mux2 op[0]#32 a[31:0] a[0:31] u[31:0]
Xmux1 mux2 b[4]#32  u[31:0] u[15:0] sin#16 v[31:0]
Xmux2 mux2 b[3]#32  v[31:0] v[23:0] sin#8 w[31:0]
Xmux3 mux2 b[2]#32  w[31:0] w[27:0] sin#4 x[31:0]
Xmux4 mux2 b[1]#32  x[31:0] x[29:0] sin#2 y[31:0]
Xmux5 mux2 b[0]#32  y[31:0] y[30:0] sin z[31:0]
Xmux6 mux2 op[0]#32 z[31:0] z[0:31] shift[31:0]
.ends

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///
///	32-bit Kogge-Stone adder
///
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// AB + C
.subckt ao21 A B C Z
//X1 A B a and2
//X2 C a Z or2
X1 nand2 A B a_
X2 inverter C C_
X3 nand2 a_ C_ Z
.ends

// initial P/G generation
.subckt pg_gen a b p g
X1 xor2 a b p
X2 and2 a b g
.ends

// carry pass through
.subckt c_pass cin cout
.connect cin cout
.ends

// carry generate
.subckt c_gen pin gin cin cout
X1 ao21 pin cin gin cout
.ends

// pg_block
.subckt pg_block p[1:0] g[1:0] p g
X1 and2 p[1:0] p
X2 ao21 p[1] g[0] g[1] g
.ends

// 32-bit Kogge-Stone adder
.subckt ks_add_32 a[31:0] b[31:0] cin s[31:0] v
// layer 0: initial P/G generation
Xpg_gen pg_gen a[31:0] b[31:0] p0_[31:0] g0_[31:0]

// layer 1: one to the right
XL1_c0 c_pass cin c1_[0]
XL1_c1 c_gen p0_[0] g0_[0] cin c1_[1]
XL1_pg pg_block p0_[31:1] p0_[30:0] g0_[31:1] g0_[30:0] p1_[31:1] g1_[31:1]

// layer 2: two to the right
XL2_c0 c_pass c1_[1:0] c2_[1:0]
XL2_c1 c_gen p1_[2:1] g1_[2:1] c1_[1:0] c2_[3:2]
XL2_pg pg_block p1_[31:3] p1_[29:1] g1_[31:3] g1_[29:1] p2_[31:3] g2_[31:3]

// layer 3: four to the right
XL3_c0 c_pass c2_[3:0] c3_[3:0]
XL3_c1 c_gen p2_[6:3] g2_[6:3] c2_[3:0] c3_[7:4]
XL3_pg pg_block p2_[31:7] p2_[27:3] g2_[31:7] g2_[27:3] p3_[31:7] g3_[31:7]

// layer 4: eight to the right
XL4_c0 c_pass c3_[7:0] c4_[7:0]
XL4_c1 c_gen p3_[14:7] g3_[14:7] c3_[7:0] c4_[15:8]
XL4_pg pg_block p3_[31:15] p3_[23:7] g3_[31:15] g3_[23:7] p4_[31:15] g4_[31:15]

// layer 5: sixteen to the right
XL5_c0 c_pass c4_[15:0] c5_[15:0]
XL5_c1 c_gen p4_[30:15] g4_[30:15] c4_[15:0] c5_[31:16]

// final sum generation
Xsum xor2 p0_[31:0] c5_[31:0] s[31:0]

// overflow logic using carry bits
// need final PG
XL5_pg pg_block p4_[31] p4_[15] g4_[31] g4_[15] p5_[31] g5_[31]
// compute carry out
XL6_c1 c_gen p5_[31] g5_[31] c5_[0] cout
// overflow = carry in to msb not the same as the carry out
Xcout xor2 cout c5_[31] v
.ends

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///
///	32-bit carry-lookahead adder
///
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

.subckt cla_add a b cin_bar sum p g
X1 xor2 a b p
X2 and2 a b g
X3 xnor2 p cin_bar sum
.ends

.subckt cla_lookahead p00 g00 p01 g01 cin pbar1 gbar1 cbar0 cbar1
X1 nand2 p00 p01 pbar1
X2 aoi21 p01 g00 g01 gbar1
X3 inverter cin cbar0
X4 aoi21 p00 cin g00 cbar1
.ends

.subckt cla_lookahead_bar pbar00 gbar00 pbar01 gbar01 cin_bar p1 g1 c0 c1
X1 nor2 pbar00 pbar01 p1
X2 oai21 pbar01 gbar00 gbar01 g1
X3 inverter cin_bar c0
X4 oai21 pbar00 cin_bar gbar00 c1
.ends

.subckt cla_add_2 a[1:0] b[1:0] cin sum[1:0] pbar1 gbar1
X1 cla_add a0 b0 cbar0 sum0 p00 g00
X2 cla_add a1 b1 cbar1 sum1 p01 g01
X3 cla_lookahead p00 g00 p01 g01 cin pbar1 gbar1 cbar0 cbar1
.ends

.subckt cla_add_4 a[3:0] b[3:0] cin_bar sum[3:0] p2 g2
X1 cla_add_2 a[1:0] b[1:0] c0 sum[1:0] pbar10 gbar10
X2 cla_add_2 a[3:2] b[3:2] c2 sum[3:2] pbar11 gbar11
X3 cla_lookahead_bar pbar10 gbar10 pbar11 gbar11 cin_bar p2 g2 c0 c2
.ends

.subckt cla_add_8 a[7:0] b[7:0] cin sum[7:0] pbar3 gbar3
X1 cla_add_4 a[3:0] b[3:0] cbar0 sum[3:0] p20 g20
X2 cla_add_4 a[7:4] b[7:4] cbar4 sum[7:4] p21 g21
X3 cla_lookahead p20 g20 p21 g21 cin pbar3 gbar3 cbar0 cbar4
.ends

.subckt cla_add_16 a[15:0] b[15:0] cin_bar sum[15:0] p4 g4
X1 cla_add_8 a[7:0] b[7:0] c0 sum[7:0] pbar30 gbar30
X2 cla_add_8 a[15:8] b[15:8] c8 sum[15:8] pbar31 gbar31
X3 cla_lookahead_bar pbar30 gbar30 pbar31 gbar31 cin_bar p4 g4 c0 c8
.ends

.subckt cla_add_32 a[31:0] b[31:0] cin sum[31:0] pbar5 gbar5
X1 cla_add_16 a[15:0] b[15:0] cbar0 sum[15:0] p40 g40
X2 cla_add_16 a[31:16] b[31:16] cbar16 sum[31:16] p41 g41
X3 cla_lookahead p40 g40 p41 g41 cin pbar5 gbar5 cbar0 cbar16
.ends

// ADD: op0 = 0
// SUB: op0 = 1  (also CMPxx)
.subckt adder a[31:0] b[31:0] s[31:0] z v n op0
Xinv inverter_2 op0 op0n
Xxr xnor2 b[31:0] op0n#32 xb[31:0]

//Xcla a[31:0] xb[31:0] op0 s[31:0] pbar5 gbar5 cla_add_32
//Xv0 a31 a31n inverter
//Xv1 xb31 xb31n inverter
//Xv2 s31 s31n inverter
//Xv3 a31 xb31 s31n v0 nand3
//Xv4 a31n xb31n s31 v1 nand3
//Xv5 v0 v1 v nand2
//Xn s31n n inverter

// KS adder is larger and epsilon faster, giving .1% improvement in Benmark :)
Xks ks_add_32 a[31:0] xb[31:0] op0 s[31:0] v
Xn buffer s[31] n

Xz0 nor2 s[31:0] za[15:0]
Xz1 nand2 za[15:0] zb[7:0]
Xz2 nor2 zb[7:0] zc[3:0]
Xz3 nand2 zc[3:0] zd[1:0]
Xz4 nor2 zd[1] zd[0] z

.ends

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///
///	carry-lookahead incrementer
///
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

.subckt incr2 in[1:0] cin out[1:0] pbar0
X1 and2 cin in[0] c1
X2 xor2 cin in[0] out[0]
X3 xor2 c1 in[1] out[1]
X4 nand2 in[0] in[1] pbar0
.ends

.subckt incr4 in[3:0] cin_bar out[3:0] cout_bar
X1 inverter cin_bar c0
X2 nor2 cin_bar pbar0 c2
X3 incr2 in[1:0] c0 out[1:0] pbar0
X4 incr2 in[3:2] c2 out[3:2] pbar2
X5 nor2 pbar0 pbar2 p
X6 nand2 p c0 cout_bar
.ends

// 32-bit incrementer using 4-bits of lookahead
.subckt incr32 in[31:0] out[31:0]
X1 incr4 in[31:0:4] in[30:0:4] in[29:0:4] in[28:0:4] cbar[6:0] gnd out[31:0:4] out[30:0:4] out[29:0:4] out[28:0:4] cbar[7:0]
.ends

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///
///	compare unit
///
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// CMPEQ: op[1:0] = 0b01
// CMPLT: op[1:0] = 0b10
// CMPLE: op[1:0] = 0b11
.subckt compare z v n cmp[31:0] op[1:0]
Xc1 xor2 n v n_xor_v
Xc2 nand2 z op[0] x0
Xc3 nand2 n_xor_v op[1] x1
Xc4 nand2 x0 x1 cmp[0]
.connect gnd cmp[31:1]
.ends

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///
///	boolean unit
///
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// AND: op[3:0] = 0b1000
// OR:  op[3:0] = 0b1110
// XOR: op[3:0] = 0b0110
// XNOR: op[3:0] = 0b1001
// "A": op[3:0] = 0b1010
.subckt boole a[31:0] b[31:0] z[31:0] op[3:0]
Xmux mux4 a[31:0] b[31:0] op[0]#32 op[1]#32 op[2]#32 op[3]#32 z[31:0]
.ends

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///
///	register file
///
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// register file built using memory primitive
.subckt regfile_mem ra[4:0] rda[31:0] rb[4:0] rdb[31:0] wa[4:0] wd[31:0] clk werf 
Gregfile memory
+ vdd gnd gnd ra[4:0] adata[31:0]    // A read port
+ vdd gnd gnd rb[4:0] bdata[31:0]     // B read port
+ gnd clk werf wa[4:0] wd[31:0]  // write port
+ width=32 nlocations=31
Xra1 and3 ra[2] ra[1] ra[0] xra1
Xra2 nand3 ra[4] ra[3] xra1 rar31
Xra3 and2 rar31#32 adata[31:0] rda[31:0]
Xrb1 and3 rb[2] rb[1] rb[0] xrb1
Xrb2 nand3 rb[4] rb[3] xrb1 rbr31
Xrb3 and2 rbr31#32 bdata[31:0] rdb[31:0]
.ends

// 5-to-32 decode
.subckt decode32 s[4:0] d[31:0]
X1 inverter s[4:0] sn[4:0]

X2 nand4 sn4 sn3 sn2 sn1 xd0
X3 nand4 sn4 sn3 sn2 s1 xd1
X4 nand4 sn4 sn3 s2 sn1 xd2
X5 nand4 sn4 sn3 s2 s1 xd3
X6 nand4 sn4 s3 sn2 sn1 xd4
X7 nand4 sn4 s3 sn2 s1 xd5
X8 nand4 sn4 s3 s2 sn1 xd6
X9 nand4 sn4 s3 s2 s1 xd7
X10 nand4 s4 sn3 sn2 sn1 xd8
X11 nand4 s4 sn3 sn2 s1 xd9
X12 nand4 s4 sn3 s2 sn1 xd10
X13 nand4 s4 sn3 s2 s1 xd11
X14 nand4 s4 s3 sn2 sn1 xd12
X15 nand4 s4 s3 sn2 s1 xd13
X16 nand4 s4 s3 s2 sn1 xd14
X17 nand4 s4 s3 s2 s1 xd15

X20 nor2 xd0 s0 d0
X21 nor2 xd0 sn0 d1
X22 nor2 xd1 s0 d2
X23 nor2 xd1 sn0 d3
X24 nor2 xd2 s0 d4
X25 nor2 xd2 sn0 d5
X26 nor2 xd3 s0 d6
X27 nor2 xd3 sn0 d7
X28 nor2 xd4 s0 d8
X29 nor2 xd4 sn0 d9
X30 nor2 xd5 s0 d10
X31 nor2 xd5 sn0 d11
X32 nor2 xd6 s0 d12
X33 nor2 xd6 sn0 d13
X34 nor2 xd7 s0 d14
X35 nor2 xd7 sn0 d15
X36 nor2 xd8 s0 d16
X37 nor2 xd8 sn0 d17
X38 nor2 xd9 s0 d18
X39 nor2 xd9 sn0 d19
X40 nor2 xd10 s0 d20
X41 nor2 xd10 sn0 d21
X42 nor2 xd11 s0 d22
X43 nor2 xd11 sn0 d23
X44 nor2 xd12 s0 d24
X45 nor2 xd12 sn0 d25
X46 nor2 xd13 s0 d26
X47 nor2 xd13 sn0 d27
X48 nor2 xd14 s0 d28
X49 nor2 xd14 sn0 d29
X50 nor2 xd15 s0 d30
X51 nor2 xd15 sn0 d31
.ends

// register file built from registers
.subckt reg e1 rd1[31:0] e2 rd2[31:0] wd[31:0] clk we1 we2
X1 nand2 we1 we2 en
X2 mux2 en#32 wd[31:0] q[31:0] d[31:0]
X3 dreg d[31:0] clk#32 q[31:0]
X4 tristate e1#32 q[31:0] rd1[31:0]
X5 tristate e2#32 q[31:0] rd2[31:0]
.ends

.subckt regfile_regs ra1[4:0] rd1[31:0] ra2[4:0] rd2[31:0] wa[4:0] xwd[31:0] clk werf
X1 decode32 ra1[4:0] ea[31:0]
X2 decode32 ra2[4:0] eb[31:0]
X3 decode32 wa[4:0] we[31:0]

X4 buffer xwd[31:0] wd[31:0]

Xbit00 reg ea[0] rd1[31:0] eb[0] rd2[31:0] wd[31:0] clk we[0] werf
Xbit01 reg ea[1] rd1[31:0] eb[1] rd2[31:0] wd[31:0] clk we[1] werf
Xbit02 reg ea[2] rd1[31:0] eb[2] rd2[31:0] wd[31:0] clk we[2] werf
Xbit03 reg ea[3] rd1[31:0] eb[3] rd2[31:0] wd[31:0] clk we[3] werf
Xbit04 reg ea[4] rd1[31:0] eb[4] rd2[31:0] wd[31:0] clk we[4] werf
Xbit05 reg ea[5] rd1[31:0] eb[5] rd2[31:0] wd[31:0] clk we[5] werf
Xbit06 reg ea[6] rd1[31:0] eb[6] rd2[31:0] wd[31:0] clk we[6] werf
Xbit07 reg ea[7] rd1[31:0] eb[7] rd2[31:0] wd[31:0] clk we[7] werf
Xbit08 reg ea[8] rd1[31:0] eb[8] rd2[31:0] wd[31:0] clk we[8] werf
Xbit09 reg ea[9] rd1[31:0] eb[9] rd2[31:0] wd[31:0] clk we[9] werf
Xbit10 reg ea[10] rd1[31:0] eb[10] rd2[31:0] wd[31:0] clk we[10] werf
Xbit11 reg ea[11] rd1[31:0] eb[11] rd2[31:0] wd[31:0] clk we[11] werf
Xbit12 reg ea[12] rd1[31:0] eb[12] rd2[31:0] wd[31:0] clk we[12] werf
Xbit13 reg ea[13] rd1[31:0] eb[13] rd2[31:0] wd[31:0] clk we[13] werf
Xbit14 reg ea[14] rd1[31:0] eb[14] rd2[31:0] wd[31:0] clk we[14] werf
Xbit15 reg ea[15] rd1[31:0] eb[15] rd2[31:0] wd[31:0] clk we[15] werf
Xbit16 reg ea[16] rd1[31:0] eb[16] rd2[31:0] wd[31:0] clk we[16] werf
Xbit17 reg ea[17] rd1[31:0] eb[17] rd2[31:0] wd[31:0] clk we[17] werf
Xbit18 reg ea[18] rd1[31:0] eb[18] rd2[31:0] wd[31:0] clk we[18] werf
Xbit19 reg ea[19] rd1[31:0] eb[19] rd2[31:0] wd[31:0] clk we[19] werf
Xbit20 reg ea[20] rd1[31:0] eb[20] rd2[31:0] wd[31:0] clk we[20] werf
Xbit21 reg ea[21] rd1[31:0] eb[21] rd2[31:0] wd[31:0] clk we[21] werf
Xbit22 reg ea[22] rd1[31:0] eb[22] rd2[31:0] wd[31:0] clk we[22] werf
Xbit23 reg ea[23] rd1[31:0] eb[23] rd2[31:0] wd[31:0] clk we[23] werf
Xbit24 reg ea[24] rd1[31:0] eb[24] rd2[31:0] wd[31:0] clk we[24] werf
Xbit25 reg ea[25] rd1[31:0] eb[25] rd2[31:0] wd[31:0] clk we[25] werf
Xbit26 reg ea[26] rd1[31:0] eb[26] rd2[31:0] wd[31:0] clk we[26] werf
Xbit27 reg ea[27] rd1[31:0] eb[27] rd2[31:0] wd[31:0] clk we[27] werf
Xbit28 reg ea[28] rd1[31:0] eb[28] rd2[31:0] wd[31:0] clk we[28] werf
Xbit29 reg ea[29] rd1[31:0] eb[29] rd2[31:0] wd[31:0] clk we[29] werf
Xbit30 reg ea[30] rd1[31:0] eb[30] rd2[31:0] wd[31:0] clk we[30] werf

Xbit31a tristate ea[31]#32 gnd#32 rd1[31:0]
Xbit31b tristate eb[31]#32 gnd#32 rd2[31:0]
.ends

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///
///	beta w/ 2-stage pipeline
///
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

.subckt beta clk reset irq ma[31:0] moe md[31:0] mwe

Xmoe nand2 resetbar mwrite moe
Xmwe inverter moe mwe		// wait before enabling our drivers 

// opcode decode
Xinstbar inverter inst[31:26] instbar[31:26]
Xop1 and2 instbar[30] instbar[31] op_illop[0]
Xop2 and3 instbar[29] inst[30] instbar[31] op_illop[1]
Xop3 and3 inst[29] inst[30] instbar[31] op_other
Xop4 and2 instbar[29] inst[31] op_arith
Xop5 and2 inst[29] inst[31] op_logic

Xopother0 and4 instbar[26] instbar[27] instbar[28] op_other op_ld
Xopother1 and4 inst[26] instbar[27] instbar[28] op_other op_st
Xopother2 and4 instbar[26] inst[27] instbar[28] op_other op_illop[2]
Xopother3 and4 inst[26] inst[27] instbar[28] op_other op_jmp
Xopother4 and4 instbar[26] instbar[27] inst[28] op_other op_beq
Xopother5 and4 inst[26] instbar[27] inst[28] op_other op_bne
Xopother6 and4 instbar[26] inst[27] inst[28] op_other op_illop[3]
Xopother7 and4 inst[26] inst[27] inst[28] op_other op_ldr

Xoparith0 and4 instbar[26] instbar[27] instbar[28] op_arith op_add
Xoparith1 and4 inst[26] instbar[27] instbar[28] op_arith op_sub
Xoparith2 and4 instbar[26] inst[27] instbar[28] op_arith op_illop[4]
Xoparith3 and4 inst[26] inst[27] instbar[28] op_arith op_illop[5]
Xoparith4 and4 instbar[26] instbar[27] inst[28] op_arith op_cmpeq
Xoparith5 and4 inst[26] instbar[27] inst[28] op_arith op_cmplt
Xoparith6 and4 instbar[26] inst[27] inst[28] op_arith op_cmple
Xoparith7 and4 inst[26] inst[27] inst[28] op_arith op_illop[6]

Xoplogic0 and4 instbar[26] instbar[27] instbar[28] op_logic op_and
Xoplogic1 and4 inst[26] instbar[27] instbar[28] op_logic op_or
Xoplogic2 and4 instbar[26] inst[27] instbar[28] op_logic op_xor
Xoplogic3 and4 inst[26] inst[27] instbar[28] op_logic op_xnor
Xoplogic4 and4 instbar[26] instbar[27] inst[28] op_logic op_shl
Xoplogic5 and4 inst[26] instbar[27] inst[28] op_logic op_shr
Xoplogic6 and4 instbar[26] inst[27] inst[28] op_logic op_sra
Xoplogic7 and4 inst[26] inst[27] inst[28] op_logic op_illop[7]

Xillopx or4 op_illop[3:0] illopx
Xillopy or4 op_illop[7:4] illopy
Xillop or2 illopx illopy illop

// aop
//  0 => ADD
//  1 => SUB (SUBx, CMPEQx, CMPLTx, CMPLEx)
Xaop or4 op_sub op_cmpeq op_cmplt op_cmple aop

// bop[3:0]
//  1000 => AND
//  1110 => OR
//  0110 => XOR
//  1001 => XNOR
Xbop0 buffer op_xnor bop[0]
Xbop1 or2 op_or op_xor bop[1]
Xbop2 or2 op_or op_xor bop[2]
Xbop3 inverter op_xor bop[3]

// sop[1:0]
//  00 => SHL (op = 1X1100)
//  01 => SHR (op = 1X1101)
//  11 => SRA (op = 1X1110)
Xsop0 or2 inst[26] inst[27] sop[0]
.connect inst[27] sop[1]

// cop[1:0]
//  01 => CMPEQ (op = 1X0100)
//  10 => CMPLT (op = 1X0101)
//  11 => CMPLE (op = 1X0110)
.connect instbar[26] cop[0]
Xcop1 or2 inst[26] inst[27] cop[1]

// asel
//  0 => Ra from regfile
//  1 => pcinc (illop, bne/beq, ldr)
Xasel or4 illop op_beq op_bne op_ldr asel

// bsel
//  0 => Ra from regfile
//  1 => csel ? sxt(inst[15:0]) : 4/sxt(inst[15:0])
.connect inst[30] bsel
Xcsel nor3 op_beq op_bne op_ldr csel

// wasel
//  0 => inst[25:21]
//  1 => XP (illop)
.connect illop wasel

// wdsel[3:0]
//  00XX => memory data (LD: msel=1)
//  01XX => adder result (ADDx, SUBx)
//  10XX => compare result (CMPEQx, CMPLTx, CMPLEx)
//  1100 => pcinc (otherwise)
//  1101 => boole result (ANDx, ORx, XORx, XNORx)
//  111X => shift result (SHLx, SHRx, SRAx)
Xwdsel0 or4 op_and op_or op_xor op_xnor wdsel[0]
Xwdsel1 or3 op_shl op_shr op_sra wdsel[1]
Xwdsel2 nor4 msel op_cmpeq op_cmplt op_cmple wdsel[2]
Xwdsel3 nor3 msel op_add op_sub wdsel[3]

// REGWR is asserted to write to RC/R30 at end of cycle;
// LD/LDR are handled separately, ST doesn't write reg file;
// writes don't happen if instruction is annuled
Xmemnxt or3 op_ld op_st op_ldr memnxt
Xregwr nor2 annul memnxt regwr

// if we're doing a memory cycle then neither MSEL
// nor MWRITE should be asserted next cycle

// if we're doing a memory cycle, write the reg file
// if it's not a memory write.  If we're not doing a
// a memory cycle REGWR tells us what to do
Xwerf mux2 msel regwr moe werf

// access memory next cycle if MEMNXT asserted, but
// only if we're not doing it this cycle!
Xxmsel and4 annulbar memnxt mselbar resetbar xmsel
Xmsel dreg xmsel clk msel_orig
Xmsel1 buffer msel_orig msel
Xmsel2 inverter msel mselbar
//Xmsel3 msel_ma_unbuf msel_ma buffer_4
//Xmsel5 xmsel clk msel_ma_ dreg
Xmsel4 dreg xmsel clk ra2sel


// only write memory when reset isn't asserted
Xresetbar inverter reset resetbar
Xxmwrite and4 annulbar op_st resetbar mselbar xmwrite
Xmwrite dreg xmwrite clk mwrite

// annul next instruction on JUMP, BEQ/BNE taken, ILLOP, RESET
Xannul dreg pcsel1 clk annul
Xannulbar inverter annul annulbar

// pcsel[1:0]
//  00 => increment (normal or annul)
//  01 => don't load (stall: msel=1)
//  10 => constant (reset, exception)
//  11 => adder output (jmp/br)
Xcond xor2 inst[26] z cond
Xopbr or2 op_bne op_beq op_br
Xbr and2 cond op_br br
Xxpcsel0 nor3 msel br op_jmp xpcsel0
Xpcsel0 or3 reset annul xpcsel0 pcsel0bar
Xdrive1 inverter_2 pcsel0bar pcsel0
Xpc1 nor3 illop br op_jmp xferbar
Xpc2 nor3 annul msel xferbar xpcsel1
Xpcsel1 nor2 reset xpcsel1 pcsel1bar
Xdrive2 inverter_2 pcsel1bar pcsel1

// compute supervisor mode bit for BR/JMP pc's coming from sum[31:0]
// use supervisor bit from EXE stage pc+4 (pcinc[31])
// JMPs are allowed to transition to user mode
Xmode1 and2 pcinc[31] sum[31] next_super
Xmode2 mux2 op_jmp pcinc[31] next_super kmode

// npc
.connect vdd const[31]
.connect gnd const[30:1]
.connect resetbar const[0]
Xpcsel mux4 pcsel0#31 pcsel1#31 npcinc[30:0] npc[30:0] const[30:0] gnd#2 sum[30:2] xnpc[30:0]

// supervisor bit (MSB of pc).  Stay in current mode
// except JMPs are allowed to transition to user mode
// and reset/exceptions/interrupts which enter kernel mode
Xsupervisor mux4 pcsel0 pcsel1 npc[31] npc[31] const[31] kmode xnpc[31]

Xnpc dreg xnpc[31:0] clk#32 npc[31:0]

// debugging
//Xtemp1 tristate gnd gnd x
//Xtemp2 mux2 pcsel1#32 npc[31] npc[28:0] 0#2 x#32 xpc[31:0]
//Xtemp3 mux2 msel#32 xpc[31:0] pc[31:0] xxpc[31:0]
//Xtemp4 dreg xxpc[31:0] clk#32 pc[31:0]

// pcinc
Xnpcinc incr32 npc[31:0] npcinc[31:0]
Xpcincmux mux2 msel#32 npcinc[31:0] pcinc[31:0] xpcinc[31:0]
Xpcinc dreg xpcinc[31:0] clk#32 pcinc[31:0]

// inst reg
Xinstmux mux2 msel#32 md[31:0] inst[31:0] xinst[31:0]
Xinst dreg xinst[31:0] clk#32 inst[31:0]

// register file
Xwasel2 dreg inst[25:21] clk#5 saved_wa[4:0]
Xra2sel mux2 ra2sel#5 inst[15:11] saved_wa[4:0] baddr[4:0]
Xwasel1 mux2 wasel#5 inst[25:21] vdd#4 gnd wxaddr[4:0]
Xwasel3 mux2 msel#5 wxaddr[4:0] saved_wa[4:0] waddr[4:0]
Xregfile regfile_mem inst[20:16] radata[31:0] baddr[4:0] rbdata[31:0] waddr[4:0] wdata[31:0] clk werf

// z
Xz0 nor4 radata[31:0] za[7:0]
Xz1 nand4 za[7:0] zb[1:0]
Xz20 nor2 zb[0] zb[1] z

// alu
Xsxt buffer inst[15] idsxt
Xaselb buffer asel asel_buf
Xcselb buffer csel csel_buf
Xalua mux2 asel_buf#32 radata[31:0] pcinc[29:0] gnd#2 alua[31:0]
Xalubx mux2 csel_buf#32 idsxt#15 inst[14:0] gnd#2 idsxt#17 inst[14:0] alubx[31:0]
Xalub mux2 bsel#32 rbdata[31:0] alubx[31:0] alub[31:0]
Xdriv3 buffer alub[31:0] alubbuf[31:0]

Xadder adder alua[31:0] alub[31:0] sum[31:0] aluz aluv alun aop
Xboole boole alua[31:0] alubbuf[31:0] boole[31:0] bop[3:0]
Xshift shifter alua[31:0] alubbuf[4:0] shift[31:0] sop[1:0]
Xcompare compare aluz aluv alun compare[31:0] cop[1:0]

// wdata muxes
Xwdselb buffer_2 wdsel[3:0] wdselbuf[3:0]
Xwdata0 mux2 wdselbuf[0]#32 pcinc[31] pcinc[28:0] gnd#2 boole[31:0] wdy[31:0]
Xwdata1 mux2 wdselbuf[1]#32 wdy[31:0] shift[31:0] wdx[31:0]
Xwdata2 mux4 wdselbuf[2]#32 wdselbuf[3]#32 md[31:0] sum[31:0] compare[31:0] wdx[31:0] wdata[31:0]

// memory data
Xmdriver tristate mwe#32 rbdata[31:0] md[31:0]

// memory address
//Xmar dreg sum[31:0] clk#32 mar[31:0]
//Xma mux2 msel_ma#32 npc[29:0] 0#2 mar[31:0] ma[31:0]
Xma1 buffer_2 xmsel xmselbuf
Xma2 mux2 xmselbuf#32 xnpc[29:0] gnd#2 sum[31:0] xma[31:0]
Xma3 dreg xma[31:0] clk#32 ma[31:0]
.ends

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///
///	top-level circuitry
///
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Xbeta beta clk reset gnd maddr[31:0] moe mdata[31:0] wr

Gmem memory
+ moe clk wr maddr[11:2] mdata[31:0]
+ width=32 nlocations=1024 contents=(
+ 0x73ff0008 0x6ffe0000 0x73ffffff 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000
+ 0x0000071c 0xc01f0000 0x7fbf0008 0x739f0008 0x739f008e 0x739f00b1 0x739f0117 0x739f0129
+ 0x739f0134 0x679f0718 0x73ffffff 0x0000071c 0xc3bd0004 0x679dfffc 0xc39f0528 0x04000000
+ 0x67dc0004 0x08000000 0x67dc0008 0x0c000000 0x67dc000c 0x10000000 0x67dc0010 0x14000000
+ 0x67dc0014 0x18000000 0x67dc0018 0x1c000000 0x67dc001c 0x20000000 0x67dc0020 0x24000000
+ 0x67dc0024 0x28000000 0x67dc0028 0x2c000000 0x67dc002c 0x30000000 0x67dc0030 0x34000000
+ 0x67dc0034 0x38000000 0x67dc0038 0x3c000000 0x67dc003c 0x40000000 0x67dc0040 0x44000000
+ 0x67dc0044 0x48000000 0x67dc0048 0x4c000000 0x67dc004c 0x50000000 0x67dc0050 0x54000000
+ 0x67dc0054 0x58000000 0x67dc0058 0x5c000000 0x67dc005c 0xc01fffff 0x62e00001 0x66fc0060
+ 0x68000000 0x67dc0068 0xc23f0134 0x6ff10000 0x67df0628 0x663c006c 0x7dbf004b 0x73cd0000
+ 0x67dc0070 0x77cd0001 0x679f0628 0x67dc0074 0x78000000 0x67dc0078 0x65bc007c 0x83cdb800
+ 0x67dc0080 0x87cdb800 0x67dc0084 0x904d6800 0x906db800 0x83c21800 0x67dc0090 0x944d6800
+ 0x946db800 0x83c21800 0x67dc0094 0x984d6800 0x98776800 0x83c21800 0x67dc0098 0x9c000000
+ 0x67dc009c 0xa3cdb800 0x67dc00a0 0xa7cdb800 0x67dc00a4 0xabcdb800 0x67dc00a8 0xafcdb800
+ 0x67dc00ac 0xc05f0004 0xb3d71000 0x67dc00b0 0xb7d71000 0x67dc00b4 0xbbd71000 0x67dc00b8
+ 0xbc000000 0x67dc00bc 0xc3c00001 0x67dc00c0 0xc7cdffff 0x67dc00c4 0xd3dc0528 0x67dc00d0
+ 0xd7cd0000 0x67dc00d4 0xdbc0ffff 0x67dc00d8 0xdc000000 0x67dc00dc 0xe3cd7654 0x67dc00e0
+ 0xe7cdffff 0x67dc00e4 0xebcdffff 0x67dc00e8 0xedadffff 0x65bc00ec 0xf3d70020 0x67dc00f0
+ 0xf7cd0006 0x67dc00f4 0xfbcd0007 0x67dc00f8 0xfc000000 0x67dc00fc 0x639dfffc 0xc3bdfffc
+ 0x6ffc0000 0xabadbabe 0xdeadbeef 0xc3bd0004 0x679dfffc 0xc01f7ff9 0xc03f0005 0x739f000a
+ 0x643f062c 0x641f0630 0xc01f7de3 0xc03f0025 0x739f0005 0x643f0634 0x641f0638 0x639dfffc
+ 0xc3bdfffc 0x6ffc0000 0xc05f0010 0xc07f0000 0xb0811000 0xc0bf0001 0xb0a51000 0xd4c00000
+ 0x77e60003 0x84002000 0x80632800 0x73ff0002 0x80002000 0x84632800 0xc4420001 0xd4c20000
+ 0x73e6fff3 0xd4c00000 0x73e60002 0x80010000 0xc4630001 0x8023f800 0x6ffc0000 0xc3bd0004
+ 0x679dfffc 0xc01f0690 0xc3bd0004 0x641dfffc 0x739f000c 0xc7bd0004 0xc3bd0004 0x641dfffc
+ 0xc01f0440 0xc3bd0004 0x641dfffc 0x739f001f 0xc7bd0008 0x641f063c 0x639dfffc 0xc3bdfffc
+ 0x6ffc0000 0xc3bd0004 0x679dfffc 0xc3bd0004 0x677dfffc 0x837df800 0xc3bd0004 0x643dfffc
+ 0xc3bd0004 0x645dfffc 0xc01f0000 0x603bfff4 0x73e10005 0x60410004 0x64010004 0x8001f800
+ 0x8022f800 0x77e1fffb 0x605dfffc 0xc3bdfffc 0x603dfffc 0xc3bdfffc 0x637dfffc 0xc3bdfffc
+ 0x639dfffc 0xc3bdfffc 0x6ffc0000 0xc3bd0004 0x679dfffc 0xc3bd0004 0x677dfffc 0x837df800
+ 0xc3bd0004 0x643dfffc 0xc3bd0004 0x645dfffc 0xc3bd0004 0x647dfffc 0x601bfff4 0x603bfff0
+ 0x77e00001 0x73e1000a 0x73e10007 0x60400000 0x60610000 0x90421800 0x73e20003 0x60000004
+ 0x60210004 0x73fffff6 0xc01f0000 0x73ff0001 0xc01f0001 0x607dfffc 0xc3bdfffc 0x605dfffc
+ 0xc3bdfffc 0x603dfffc 0xc3bdfffc 0x637dfffc 0xc3bdfffc 0x639dfffc 0xc3bdfffc 0x6ffc0000
+ 0x00000001 0x00000488 0x0000000a 0x00000490 0x00000003 0x00000478 0x00000009 0x00000448
+ 0x00000005 0x00000470 0x00000007 0x00000480 0x00000006 0x00000468 0x00000004 0x00000460
+ 0x00000008 0x00000458 0x00000002 0x00000450 0x0000000b 0x00000000 0xc3bd0004 0x679dfffc
+ 0xc05f0002 0xc0ff0698 0x739f0000 0xc01f003c 0x80c7f800 0x603cfffc 0x64270000 0xc39c0004
+ 0xc0e70004 0xc4000004 0x77e0fffa 0xc4420001 0x73e20001 0x6fe60000 0x639dfffc 0xc3bdfffc
+ 0x6ffc0000 0xc01f0000 0xc03f0000 0xc05f0014 0xc0000001 0xc0210003 0x80000800 0x80200800
+ 0xc4420001 0x77e2fffa 0x80010000 0x641f0710 0x6ffc0000 0xc01f1000 0x6780fffc 0x6000fffc
+ 0x641f0714 0x6ffc0000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000
+ 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000
+ 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000
+ 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000
+ 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000
+ 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000
+ 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000
+ 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000
+ 0x00000000 0x00000000 0xedededed 0xedededed 0xedededed 0xedededed 0xedededed 0xedededed
+ 0x00000001 0x00000000 0x0000000a 0x00000658 0x00000003 0x00000688 0x00000009 0x00000680
+ 0x00000005 0x00000678 0x00000007 0x00000670 0x00000006 0x00000660 0x00000004 0x00000650
+ 0x00000008 0x00000668 0x00000002 0x00000640 0x0000000b 0x00000648 0x00000000 0x00000000
+ 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000
+ 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000
+ 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000
+ 0x00000000 0x00000000 0x00000000 0x00000000 0xedededed 0x0badbabe 0xedededed 0x00000000
+ )

// 4.8ns cycle time, assert RESET for first cycle. Your cycle time may vary...
Vclk clk gnd clock(1,0,4.8ns)
Vreset reset gnd step(1,0,5ns)
 
// Run the simulation for 1104 cycles (1565 cycles with pipeline)
.tran 7512ns 

.plotdef reg R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15
+ R16 R17 R18 R19 R20 R21 R22 R23 R24 R25 R26 R27 R28 R29 R30 R31

.plotdef betaop
+ "???"  "???"  "???"  "???"  "???"  "???"  "???"  "???"
+ "???"  "???"  "???"  "???"  "???"  "???"  "???"  "???"
+ "???"  "???"  "???"  "???"  "???"  "???"  "???"  "???"
+ LD     ST     "???"  JMP    BEQ    BNE    "???"  LDR
+ ADD    SUB    MUL    DIV    CMPEQ  CMPLT  CMPLE  "???"
+ AND    OR     XOR    XNOR   SHL    SHR    SRA    "???"
+ ADDC   SUBC   MULC   DIVC   CMPEQC CMPLTC CMPLEC "???"
+ ANDC   ORC    XORC   XNORC  SHLC   SHRC   SRAC   "???"

.plot clk
.plot reset
.plot L(maddr[31:0])
.plot L(mdata[31:0])
.plot moe
.plot wr
//.plot xbeta.pc[31:0]
.plot betaop(Xbeta.inst[31:26])
.plot reg(Xbeta.inst[20:16])
.plot reg(Xbeta.inst[15:11])
.plot reg(Xbeta.inst[25:21])
