// This is a machine-generated file; do not edit.

// allow verification of results, but no check-in
.checkoff "" "Lab2: compare" 0

Wfn fn[4:0] nrz(0, 1.0, 100n, 0n, .1n,.1n)
+ 0x5 // 0ns:  [CMPEQ 0x5 0x4]
+ 0x7 // 100ns:  [CMPLT 0x5 0x4]
+ 0xd // 200ns:  [CMPLE 0x5 0x4]
+ 0x5 // 300ns:  [CMPEQ 0x5 0x5]
+ 0x7 // 400ns:  [CMPLT 0x5 0x5]
+ 0xd // 500ns:  [CMPLE 0x5 0x5]
+ 0x5 // 600ns:  [CMPEQ 0x5 0x6]
+ 0x7 // 700ns:  [CMPLT 0x5 0x6]
+ 0xd // 800ns:  [CMPLE 0x5 0x6]
+ 0x5 // 900ns:  [CMPEQ 0x-5 0x-4]
+ 0x7 // 1000ns:  [CMPLT 0x-5 0x-4]
+ 0xd // 1100ns:  [CMPLE 0x-5 0x-4]
+ 0x5 // 1200ns:  [CMPEQ 0x-5 0x-5]
+ 0x7 // 1300ns:  [CMPLT 0x-5 0x-5]
+ 0xd // 1400ns:  [CMPLE 0x-5 0x-5]
+ 0x5 // 1500ns:  [CMPEQ 0x-5 0x-6]
+ 0x7 // 1600ns:  [CMPLT 0x-5 0x-6]
+ 0xd // 1700ns:  [CMPLE 0x-5 0x-6]

Wa a[31:0] nrz(0, 1.0, 100n, 0n, .1n,.1n)
+ 0x5 // 0ns:  [CMPEQ 0x5 0x4]
+ 0x5 // 100ns:  [CMPLT 0x5 0x4]
+ 0x5 // 200ns:  [CMPLE 0x5 0x4]
+ 0x5 // 300ns:  [CMPEQ 0x5 0x5]
+ 0x5 // 400ns:  [CMPLT 0x5 0x5]
+ 0x5 // 500ns:  [CMPLE 0x5 0x5]
+ 0x5 // 600ns:  [CMPEQ 0x5 0x6]
+ 0x5 // 700ns:  [CMPLT 0x5 0x6]
+ 0x5 // 800ns:  [CMPLE 0x5 0x6]
+ 0xfffffffb // 900ns:  [CMPEQ 0x-5 0x-4]
+ 0xfffffffb // 1000ns:  [CMPLT 0x-5 0x-4]
+ 0xfffffffb // 1100ns:  [CMPLE 0x-5 0x-4]
+ 0xfffffffb // 1200ns:  [CMPEQ 0x-5 0x-5]
+ 0xfffffffb // 1300ns:  [CMPLT 0x-5 0x-5]
+ 0xfffffffb // 1400ns:  [CMPLE 0x-5 0x-5]
+ 0xfffffffb // 1500ns:  [CMPEQ 0x-5 0x-6]
+ 0xfffffffb // 1600ns:  [CMPLT 0x-5 0x-6]
+ 0xfffffffb // 1700ns:  [CMPLE 0x-5 0x-6]

Wb b[31:0] nrz(0, 1.0, 100n, 0n, .1n,.1n)
+ 0x4 // 0ns:  [CMPEQ 0x5 0x4]
+ 0x4 // 100ns:  [CMPLT 0x5 0x4]
+ 0x4 // 200ns:  [CMPLE 0x5 0x4]
+ 0x5 // 300ns:  [CMPEQ 0x5 0x5]
+ 0x5 // 400ns:  [CMPLT 0x5 0x5]
+ 0x5 // 500ns:  [CMPLE 0x5 0x5]
+ 0x6 // 600ns:  [CMPEQ 0x5 0x6]
+ 0x6 // 700ns:  [CMPLT 0x5 0x6]
+ 0x6 // 800ns:  [CMPLE 0x5 0x6]
+ 0xfffffffc // 900ns:  [CMPEQ 0x-5 0x-4]
+ 0xfffffffc // 1000ns:  [CMPLT 0x-5 0x-4]
+ 0xfffffffc // 1100ns:  [CMPLE 0x-5 0x-4]
+ 0xfffffffb // 1200ns:  [CMPEQ 0x-5 0x-5]
+ 0xfffffffb // 1300ns:  [CMPLT 0x-5 0x-5]
+ 0xfffffffb // 1400ns:  [CMPLE 0x-5 0x-5]
+ 0xfffffffa // 1500ns:  [CMPEQ 0x-5 0x-6]
+ 0xfffffffa // 1600ns:  [CMPLT 0x-5 0x-6]
+ 0xfffffffa // 1700ns:  [CMPLE 0x-5 0x-6]

.verify y[31:0] tvpairs()
+ 99ns 0x0 // 99ns:  [CMPEQ 0x5 0x4]
+ 199ns 0x0 // 199ns:  [CMPLT 0x5 0x4]
+ 299ns 0x0 // 299ns:  [CMPLE 0x5 0x4]
+ 399ns 0x1 // 399ns:  [CMPEQ 0x5 0x5]
+ 499ns 0x0 // 499ns:  [CMPLT 0x5 0x5]
+ 599ns 0x1 // 599ns:  [CMPLE 0x5 0x5]
+ 699ns 0x0 // 699ns:  [CMPEQ 0x5 0x6]
+ 799ns 0x1 // 799ns:  [CMPLT 0x5 0x6]
+ 899ns 0x1 // 899ns:  [CMPLE 0x5 0x6]
+ 999ns 0x0 // 999ns:  [CMPEQ 0x-5 0x-4]
+ 1099ns 0x1 // 1099ns:  [CMPLT 0x-5 0x-4]
+ 1199ns 0x1 // 1199ns:  [CMPLE 0x-5 0x-4]
+ 1299ns 0x1 // 1299ns:  [CMPEQ 0x-5 0x-5]
+ 1399ns 0x0 // 1399ns:  [CMPLT 0x-5 0x-5]
+ 1499ns 0x1 // 1499ns:  [CMPLE 0x-5 0x-5]
+ 1599ns 0x0 // 1599ns:  [CMPEQ 0x-5 0x-6]
+ 1699ns 0x0 // 1699ns:  [CMPLT 0x-5 0x-6]
+ 1799ns 0x0 // 1799ns:  [CMPLE 0x-5 0x-6]

.verify z tvpairs()
+ 99ns 0x0 // 99ns:  [CMPEQ 0x5 0x4]
+ 199ns 0x0 // 199ns:  [CMPLT 0x5 0x4]
+ 299ns 0x0 // 299ns:  [CMPLE 0x5 0x4]
+ 399ns 0x1 // 399ns:  [CMPEQ 0x5 0x5]
+ 499ns 0x1 // 499ns:  [CMPLT 0x5 0x5]
+ 599ns 0x1 // 599ns:  [CMPLE 0x5 0x5]
+ 699ns 0x0 // 699ns:  [CMPEQ 0x5 0x6]
+ 799ns 0x0 // 799ns:  [CMPLT 0x5 0x6]
+ 899ns 0x0 // 899ns:  [CMPLE 0x5 0x6]
+ 999ns 0x0 // 999ns:  [CMPEQ 0x-5 0x-4]
+ 1099ns 0x0 // 1099ns:  [CMPLT 0x-5 0x-4]
+ 1199ns 0x0 // 1199ns:  [CMPLE 0x-5 0x-4]
+ 1299ns 0x1 // 1299ns:  [CMPEQ 0x-5 0x-5]
+ 1399ns 0x1 // 1399ns:  [CMPLT 0x-5 0x-5]
+ 1499ns 0x1 // 1499ns:  [CMPLE 0x-5 0x-5]
+ 1599ns 0x0 // 1599ns:  [CMPEQ 0x-5 0x-6]
+ 1699ns 0x0 // 1699ns:  [CMPLT 0x-5 0x-6]
+ 1799ns 0x0 // 1799ns:  [CMPLE 0x-5 0x-6]

.verify n tvpairs()
+ 99ns 0x0 // 99ns:  [CMPEQ 0x5 0x4]
+ 199ns 0x0 // 199ns:  [CMPLT 0x5 0x4]
+ 299ns 0x0 // 299ns:  [CMPLE 0x5 0x4]
+ 399ns 0x0 // 399ns:  [CMPEQ 0x5 0x5]
+ 499ns 0x0 // 499ns:  [CMPLT 0x5 0x5]
+ 599ns 0x0 // 599ns:  [CMPLE 0x5 0x5]
+ 699ns 0x1 // 699ns:  [CMPEQ 0x5 0x6]
+ 799ns 0x1 // 799ns:  [CMPLT 0x5 0x6]
+ 899ns 0x1 // 899ns:  [CMPLE 0x5 0x6]
+ 999ns 0x1 // 999ns:  [CMPEQ 0x-5 0x-4]
+ 1099ns 0x1 // 1099ns:  [CMPLT 0x-5 0x-4]
+ 1199ns 0x1 // 1199ns:  [CMPLE 0x-5 0x-4]
+ 1299ns 0x0 // 1299ns:  [CMPEQ 0x-5 0x-5]
+ 1399ns 0x0 // 1399ns:  [CMPLT 0x-5 0x-5]
+ 1499ns 0x0 // 1499ns:  [CMPLE 0x-5 0x-5]
+ 1599ns 0x0 // 1599ns:  [CMPEQ 0x-5 0x-6]
+ 1699ns 0x0 // 1699ns:  [CMPLT 0x-5 0x-6]
+ 1799ns 0x0 // 1799ns:  [CMPLE 0x-5 0x-6]

.verify v tvpairs()
+ 99ns 0x0 // 99ns:  [CMPEQ 0x5 0x4]
+ 199ns 0x0 // 199ns:  [CMPLT 0x5 0x4]
+ 299ns 0x0 // 299ns:  [CMPLE 0x5 0x4]
+ 399ns 0x0 // 399ns:  [CMPEQ 0x5 0x5]
+ 499ns 0x0 // 499ns:  [CMPLT 0x5 0x5]
+ 599ns 0x0 // 599ns:  [CMPLE 0x5 0x5]
+ 699ns 0x0 // 699ns:  [CMPEQ 0x5 0x6]
+ 799ns 0x0 // 799ns:  [CMPLT 0x5 0x6]
+ 899ns 0x0 // 899ns:  [CMPLE 0x5 0x6]
+ 999ns 0x0 // 999ns:  [CMPEQ 0x-5 0x-4]
+ 1099ns 0x0 // 1099ns:  [CMPLT 0x-5 0x-4]
+ 1199ns 0x0 // 1199ns:  [CMPLE 0x-5 0x-4]
+ 1299ns 0x0 // 1299ns:  [CMPEQ 0x-5 0x-5]
+ 1399ns 0x0 // 1399ns:  [CMPLT 0x-5 0x-5]
+ 1499ns 0x0 // 1499ns:  [CMPLE 0x-5 0x-5]
+ 1599ns 0x0 // 1599ns:  [CMPEQ 0x-5 0x-6]
+ 1699ns 0x0 // 1699ns:  [CMPLT 0x-5 0x-6]
+ 1799ns 0x0 // 1799ns:  [CMPLE 0x-5 0x-6]


/* instantiate alu
*/
Xalu alu fn[4:0] a[31:0] b[31:0] y[31:0] z v n


/* Run the simulation long enough to test all input values
*/
.tran 1800n

/* Some useful plots... you can plot additional signals by specifying
* the appropriate .plot commands in your main netlist file.
*/

.plotdef op
+ ADD SUB MUL "???" "???" CMPEQ "???" CMPLT SHL SHR "???" SRA "???" CMPLE "???" "???"
+ F0000 F0001 F0010 F0011 F0100 F0101 XOR F0111 AND XNOR A F1011 F1100 F1101 OR F1111



.plot L(a[31:0])
.plot L(b[31:0])
.plot op(fn[4:0])
.plot L(y[31:0])
.plot z
.plot n
.plot v
