////////////////////////////////////////////////////////////////////////////////
// Basic Beta setup for 6.004 lab checkoff code
////////////////////////////////////////////////////////////////////////////////

.include "/shared/bsim/beta.uasm"		// Define Beta instructions, etc.
.options tty


// Interrupt vectors:

. = VEC_RESET
	BR(I_Reset)	// on Reset (start-up)
. = VEC_II
	BR(I_IllOp)	// on Illegal Instruction (eg SVC)
. = VEC_CLK
	BR(I_Clk)	// On clock interrupt
. = VEC_KBD
	BR(I_Kbd)	// on Keyboard interrupt
. = VEC_MOUSE
	BR(I_BadInt)	// on mouse interrupt

// Dummy interrupt vectors:
I_Reset:	BR(_start)
I_IllOp: 	HALT()
I_Clk:	 	HALT()
I_Kbd:	 	HALT()
I_BadInt:	HALT()

//////////////////////////////////////////////////////////////////////////////
// Kernel-callable Utility Routines
// Note 1: These routines use PRIVILEDGED instructions; hence they can be
//  called directly only from kernel code (ie, with the high-PC-bit
//  set).
//
// Note 2: These calls use non-standard calling conventions
//
// Code stolen from ancient lab 8...
//////////////////////////////////////////////////////////////////////////////

// Hex print procedure: prints longword in R0

HexDig:	LONG('0') LONG('1') LONG('2') LONG('3') LONG('4') LONG('5')
	LONG('6') LONG('7') LONG('8') LONG('9') LONG('A') LONG('B')
	LONG('C') LONG('D') LONG('E') LONG('F')

KHexPrt:
	PUSH(r0)		// Saves all regs, incl r0
	PUSH(r1)
	PUSH(r2)
	PUSH(lp)

	CMOVE(8, r2)
KHexxx:	MOVE(r0,r1)
KHexPr1:
	SRAC(r1,28,r0)			// Extract digit into r0.
	MULC(r1, 16, r1)		// Next loop, next nybble...
	ANDC(r0, 0xF, r0)
	MULC(r0, 4, r0)
	LD(r0, HexDig, r0)
	WRCHAR ()
	SUBC(r2,1,r2)
	BNE(r2,KHexPr1)

	POP(lp)
	POP(r2)
	POP(r1)
	POP(r0)
	RTN()

// Versions for fewer hex digits:
KHexPrt4:
	PUSH(r0)
	PUSH(r1)
	PUSH(r2)
	PUSH(lp)
	SHLC(r0, 16, r0)
	CMOVE(4, r2)
	BR(KHexxx)

KHexPrt2:
	PUSH(r0)
	PUSH(r1)
	PUSH(r2)
	PUSH(lp)
	SHLC(r0, 24, r0)
	CMOVE(2, r2)
	BR(KHexxx)

KHexPrt1:
	PUSH(r0)
	PUSH(r1)
	PUSH(r2)
	PUSH(lp)
	SHLC(r0, 28, r0)
	CMOVE(1, r2)
	BR(KHexxx)

////////////////////////////////////////////////////////////////////////
// Decimal integer print
// ... a bit painful, since there's no divide/remaindering!
////////////////////////////////////////////////////////////////////////

// Table of powers of 10, to
_powers10:
	LONG(1000000000)	LONG(100000000)		LONG(10000000)		LONG(1000000)
	LONG(100000)		LONG(10000)		LONG(1000)		LONG(100)
	LONG(10)		LONG(1)			LONG(0)

// Print decimal integer in R0:
_DecPrt:
	PUSH(R0) PUSH(R1) PUSH(R2) PUSH(R3) PUSH(R4) PUSH(R5)

	MOVE(R0, R1)			// free up R0 for other stuff

	// First, check for negative:
	CMPLTC(R1, 0, R0)
	BF(R0, _Dec1)
	CMOVE('-', R0)
	WRCHAR()		// Print '-',
	SUB(R31, R1, R1)	// and negate number.

_Dec1:	CMOVE(_powers10, R4)	// prepare to deplete successive digits...
	CMOVE(0, R3)	 	// ignore leading zeros ... nothing yet.

_Dec2:	CMOVE(0, R2)		// Compute next digit, by depletion
	LD(R4, 0, R5)		// R5 = 10**k
	CMPEQC(R5, 1, R0)	// Are we down to 1?
	BT(R0, _Dec8)  		// yup, go print last digit.

_Dec3:	CMPLT(R1, R5, R0)	// Can we subtract this digit again?
	BT(R0, _Dec4)  		// nope

	ADDC(R2, 1, R2)		// increment the digit,
	SUB(R1, R5, R1)		// x -= 10**k
	BR(_Dec3)    		// and back for more.

// Here when we've computed next digit, in R2
_Dec4:	// Leading zero elimination:
   	BNE(R2, _Dec5)		// Branch if its not a zero...
	BNE(R3, _Dec5)		// Branch if its not a LEADING zero...

	// Its a leading zero... fall thru to 

// Move to next digit:
_Dec6:	ADDC(R4, 4, R4)
	BR(_Dec2)

	// Print a digit:
_Dec5:	CMOVE('0', R0)
	ADD(R0, R2, R0)
	MOVE(R0, R3)		// No more leading zeros
	WRCHAR()
	BR(_Dec6)

// Here to print last digit:
_Dec8:	CMOVE('0', R0)
	ADD(R1, R0, R0)
	WRCHAR()

	POP(R5)	POP(R4) POP(R3) POP(R2) POP(R1) POP(R0)
	JMP(LP)


////////////////////////////////////////////////////////////////////////
// Procedure to print out a zero-terminated message, packed one       //
//    char/byte. Char data follows branch; returns to next 4-byte     //
//    aligned location. Saves all regs.			              //
////////////////////////////////////////////////////////////////////////

_KWrMsg:
	PUSH (R0)
	MOVE(LP, R0)
	CALL(_KMsgAux)
	MOVE(R0, LP)
	POP (R0)
	RTN()

// Auxiliary routine for sending a message to the console.
// On entry, R0 should point to data; on return, R0 holds next
// longword aligned location after data.
// Note: Must be called while in supervisor mode.

_KMsgAux:
	PUSH(r1)
	PUSH(r2)
	PUSH(r3)
	PUSH(r4)

	MOVE (R0, R1)

_WrWord:
	LD (R1, 0, R2)		// Fetch a 4-byte word into R2
	ADDC (R1, 4, R1)	// Increment word pointer
	CMOVE(4,r3)		// Byte/word counter

_WrByte:
	ANDC(r2, 0x7F, r0)	// Grab next byte -- LOW end first!
	BEQ(r0, _WrEnd)		// Zero byte means end of text.
	WRCHAR()		// Print it.
	SRAC(r2,8,r2)		// Shift out this byte
	SUBC(r3,1,r3)		// Count down... done with this word?
	BNE(r3,_WrByte)		// Nope, continue.
	BR(_WrWord)		// Yup, on to next.

_WrEnd:
	MOVE (R1, R0)
	POP(r4)
	POP(r3)
	POP(r2)
	POP(r1)
	RTN()
